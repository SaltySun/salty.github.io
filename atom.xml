<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dr.SlatySun</title>
  
  
  <link href="http://example.com/salty.github.io/atom.xml" rel="self"/>
  
  <link href="http://example.com/salty.github.io/"/>
  <updated>2023-03-23T03:07:36.461Z</updated>
  <id>http://example.com/salty.github.io/</id>
  
  <author>
    <name>Salty Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大陆的稀有材料设定</title>
    <link href="http://example.com/salty.github.io/2023/03/23/%E5%A4%A7%E9%99%86%E7%9A%84%E7%A8%80%E6%9C%89%E6%9D%90%E6%96%99%E8%AE%BE%E5%AE%9A/"/>
    <id>http://example.com/salty.github.io/2023/03/23/%E5%A4%A7%E9%99%86%E7%9A%84%E7%A8%80%E6%9C%89%E6%9D%90%E6%96%99%E8%AE%BE%E5%AE%9A/</id>
    <published>2023-03-23T03:05:40.397Z</published>
    <updated>2023-03-23T03:07:36.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="锋锐石-x2F-防护石"><a href="#锋锐石-x2F-防护石" class="headerlink" title="锋锐石&#x2F;防护石"></a>锋锐石&#x2F;防护石</h2><p>蕴含魔法但却对立的两种矿石，被加工后是最简单的附魔物品用与短暂的提升物品性能。</p><h2 id="燃烧宝石"><a href="#燃烧宝石" class="headerlink" title="燃烧宝石"></a>燃烧宝石</h2><p>较为通用的能源矿石，主要用于维持城市的能源稳定，但由于其体积小，能量庞大而不稳定的特性，也十分被普通人应用。</p><h2 id="莱因的软黄金"><a href="#莱因的软黄金" class="headerlink" title="莱因的软黄金"></a>莱因的软黄金</h2><p>遗失的锻造手法，那位名为莱因的工匠在死之前，留下一份神秘的软黄金，几乎没有人能够复制，而这又是锻造传说物品最重要的一件原料。</p><h2 id="储法石"><a href="#储法石" class="headerlink" title="储法石"></a>储法石</h2><p>蕴含着奥法秩序的石头，经过施法者编织可以储存相应法术。</p><h2 id="灵魂矿石"><a href="#灵魂矿石" class="headerlink" title="灵魂矿石"></a>灵魂矿石</h2><p>诞生于深渊，是领主们用来封印灵魂最好的材质，在注满灵魂后，是最棒的交易货币。</p><h2 id="混沌原石"><a href="#混沌原石" class="headerlink" title="混沌原石"></a>混沌原石</h2><p>只有在混沌海深处能够采集得到，但是进入混沌海的人都会被来自“时间另一头”的生物袭击，所以少有人能活着将石头带回来。</p><h2 id="流彩之石"><a href="#流彩之石" class="headerlink" title="流彩之石"></a>流彩之石</h2><p>大陆上较为常见的元素矿石，能够改变一个物件本身的元素，这里的常见也仅仅是和其他材料相比，本身还是较为罕见的，一般诞生于元素生物汇聚的地方。</p><h2 id="龙命石"><a href="#龙命石" class="headerlink" title="龙命石"></a>龙命石</h2><p>出现于龙族死亡的地方，一般伴随着巨大的龙威，其中蕴含着一条巨龙死亡之前的所有力量，只有少部分人能够使用其中的力量。</p><h2 id="生命结晶"><a href="#生命结晶" class="headerlink" title="生命结晶"></a>生命结晶</h2><p>只有诞生于生命之境的树精死亡才能留下，其中庞大的生命之力能够让人几乎永生。</p><h2 id="秩序结晶"><a href="#秩序结晶" class="headerlink" title="秩序结晶"></a>秩序结晶</h2><p>传说为神的尸体。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;锋锐石-x2F-防护石&quot;&gt;&lt;a href=&quot;#锋锐石-x2F-防护石&quot; class=&quot;headerlink&quot; title=&quot;锋锐石&amp;#x2F;防护石&quot;&gt;&lt;/a&gt;锋锐石&amp;#x2F;防护石&lt;/h2&gt;&lt;p&gt;蕴含魔法但却对立的两种矿石，被加工后是最简单的附魔物品用与短暂的</summary>
      
    
    
    
    <category term="DND" scheme="http://example.com/salty.github.io/categories/DND/"/>
    
    
    <category term="荒域" scheme="http://example.com/salty.github.io/tags/%E8%8D%92%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>vue3.0 + Ts 入门</title>
    <link href="http://example.com/salty.github.io/2022/12/29/vue3.0%20+%20Ts%20%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/salty.github.io/2022/12/29/vue3.0%20+%20Ts%20%E5%85%A5%E9%97%A8/</id>
    <published>2022-12-28T16:00:00.000Z</published>
    <updated>2023-03-24T06:56:10.656Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-vue3-0与vue2-0区别"><a href="#1-vue3-0与vue2-0区别" class="headerlink" title="1.vue3.0与vue2.0区别"></a>1.vue3.0与vue2.0区别</h4><ul><li>vue2中执行顺序 beforeCreate&#x3D;&gt;created&#x3D;&gt;beforeMount &#x3D;&gt;mounted&#x3D;&gt;beforeUpdate &#x3D;&gt;updated&#x3D;&gt;beforeDestroy&#x3D;&gt;destroyed</li><li>vue3中执行顺序 setup&#x3D;&gt;onBeforeMount&#x3D;&gt;onMounted&#x3D;&gt;onBeforeUpdate&#x3D;&gt;onUpdated&#x3D;&gt;onBeforeUnmount&#x3D;&gt;onUnmounted</li></ul><p>生命周期对应关系,后者为vue3.0</p><ul><li>beforeCreate-&gt;setup</li><li>created -&gt; setup</li><li>beforeMount -&gt; onBeforeMount</li><li>mounted -&gt; onMounted</li><li>beforeUpdate -&gt; onBeforeUpdate</li><li>updated -&gt; onUpdated</li><li>beforeDestroy -&gt; onBeforeUnmount</li><li>destroyed -&gt; onUnmounted</li></ul><h5 id="vue2和vue3双向数据绑定原理发生了改变"><a href="#vue2和vue3双向数据绑定原理发生了改变" class="headerlink" title="vue2和vue3双向数据绑定原理发生了改变"></a>vue2和vue3双向数据绑定原理发生了改变</h5><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663904865779-1bb94091-0394-4895-83bf-920d1152c32f.png#clientId=u5bfd2b6e-665d-4&from=paste&height=448&id=u4c589252&name=image.png&originHeight=448&originWidth=763&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56813&status=done&style=none&taskId=ucf4a588c-58bd-45b8-837f-85723980a08&title=&width=763" alt="image.png"></p><p>vue3.0响应式数据创建<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663910266341-36c3fcbe-e8a8-4ca2-af4d-5bf038cc62ee.png#clientId=u5bfd2b6e-665d-4&from=paste&height=662&id=ud371deb3&name=image.png&originHeight=662&originWidth=771&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28330&status=done&style=none&taskId=u849c2c25-faa6-43aa-a4d6-1a0b2aa0ac6&title=&width=771" alt="image.png"><br>通过引入ref和reactive<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663909949848-0e709893-bfae-4843-a604-1271a73180d8.png#clientId=u5bfd2b6e-665d-4&from=paste&height=519&id=u662b930c&name=image.png&originHeight=519&originWidth=724&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32924&status=done&style=none&taskId=ua45f404f-a483-41fb-9c8b-0122f246a69&title=&width=724" alt="image.png"><br>ref针对单个响应式数据,reative针对的是对象<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663910383029-cc170a65-57ee-4e7d-a8b9-95c141f0b916.png#clientId=u5bfd2b6e-665d-4&from=paste&height=215&id=u9f77da41&name=image.png&originHeight=215&originWidth=868&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9574&status=done&style=none&taskId=ue8965c0c-93a1-47e7-b06b-0213370b361&title=&width=868" alt="image.png"></p><h1 id="TS和JS的一些区别"><a href="#TS和JS的一些区别" class="headerlink" title="TS和JS的一些区别"></a>TS和JS的一些区别</h1><p>typescript 特点</p><p>ts是js的超集，即你可以在ts中使用原生js语法。<br>ts需要静态编译，它提供了强类型与更多面向对象的内容。<br>ts最终仍要编译为弱类型的js文件，基于对象的原生的js，再运行。故ts相较java&#x2F;C#这样天生面向对象语言是有区别和局限的<br>ts是由微软牵头主导的，主要来自C#<br>TypeScript和JavaScript的对比：<br>TypeScript是一个应用程序级的JavaScript开发语言。（这也表示TypeScript比较牛逼，可以开发大型应用，或者说更适合开发大型应用）<br>TypeScript是JavaScript的超集，可以编译成纯JavaScript。这个和我们CSS离的Less或者Sass是很像的，<br>我们用更好的代码编写方式来进行编写，最后还是有好生成原生的JavaScript语言。<br>TypeScript跨浏览器、跨操作系统、跨主机、且开源。由于最后他编译成了JavaScript所以只要能运行JS的地方，都可以运行我们写的程序，设置在node.js里。<br>TypeScript始于JavaScript，终于JavaScript。遵循JavaScript的语法和语义<br>TypeScript可以重用JavaScript代码，调用流行的JavaScript库。</p><h1 id="TypeScript-安装"><a href="#TypeScript-安装" class="headerlink" title="TypeScript 安装"></a>TypeScript 安装</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663910987900-fc836973-f199-4ef1-b1cb-2d9549d49656.png#clientId=u5bfd2b6e-665d-4&from=paste&height=42&id=u387e6a2b&name=image.png&originHeight=42&originWidth=371&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1323&status=done&style=none&taskId=u94eba5fa-a0c7-47ff-bad4-c455b07f9c9&title=&width=371" alt="image.png"><br>创建一个变量,定义str类型,其他类型同理<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911004817-1b528b82-051e-4474-bdeb-5d97bd6075bb.png#clientId=u5bfd2b6e-665d-4&from=paste&height=58&id=ufec52a65&name=image.png&originHeight=58&originWidth=338&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3187&status=done&style=none&taskId=u02fe5b9d-1763-487a-b86a-9e4e942da0d&title=&width=338" alt="image.png"><br>声明一个变量为数组<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911121571-3aca6c3c-e3fe-4beb-bd88-1618d709f12d.png#clientId=u5bfd2b6e-665d-4&from=paste&height=136&id=u3b3b7c5c&name=image.png&originHeight=136&originWidth=358&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4574&status=done&style=none&taskId=uee554cd0-7c3c-4b38-9520-818fdd01195&title=&width=358" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911430412-91ca3555-de27-411f-812c-be15408d764d.png#clientId=u5bfd2b6e-665d-4&from=paste&height=75&id=ua846b125&name=image.png&originHeight=75&originWidth=386&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3208&status=done&style=none&taskId=u54822c4f-0050-43cf-bc85-2d10b83fa8f&title=&width=386" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911438771-8e4eb638-6da9-4f00-baac-39624e9a8ca8.png#clientId=u5bfd2b6e-665d-4&from=paste&height=59&id=u5a1e9e1e&name=image.png&originHeight=59&originWidth=409&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3229&status=done&style=none&taskId=u3237b36b-2094-4196-b460-50e428200f8&title=&width=409" alt="image.png"></p><h2 id="Any-类型"><a href="#Any-类型" class="headerlink" title="Any 类型"></a>Any 类型</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911169557-7faa7de8-f138-4c07-98bb-5abd8c65ddfd.png#clientId=u5bfd2b6e-665d-4&from=paste&height=96&id=ue4bf930d&name=image.png&originHeight=96&originWidth=383&originalType=binary&ratio=1&rotation=0&showTitle=false&size=4080&status=done&style=none&taskId=u06a7fdbc-33e9-48b4-81f4-79b568eff4d&title=&width=383" alt="image.png"></p><h1 id="TypeScript-接口"><a href="#TypeScript-接口" class="headerlink" title="TypeScript 接口"></a>TypeScript 接口</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911210710-63d95bd2-261e-4fbf-b9cd-cf7ba192096d.png#clientId=u5bfd2b6e-665d-4&from=paste&height=72&id=u5f1c5027&name=image.png&originHeight=72&originWidth=264&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1630&status=done&style=none&taskId=uee01c37b-bc2c-4922-94d3-b62a76c2695&title=&width=264" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911231068-aa528b30-1e31-46ea-8b51-b868d418e45f.png#clientId=u5bfd2b6e-665d-4&from=paste&height=480&id=uca3672b5&name=image.png&originHeight=480&originWidth=570&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29221&status=done&style=none&taskId=ua21e4351-c7e3-47f1-8f41-67a74a60434&title=&width=570" alt="image.png"></p><h1 id="TypeScript-对象"><a href="#TypeScript-对象" class="headerlink" title="TypeScript 对象"></a>TypeScript 对象</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911317900-32e85b22-56ab-4900-b80c-6338f9f9e1e2.png#clientId=u5bfd2b6e-665d-4&from=paste&height=164&id=ubcbec9b6&name=image.png&originHeight=164&originWidth=396&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7035&status=done&style=none&taskId=u67dafebd-2f9e-48c0-bbd8-ae90c4da2ef&title=&width=396" alt="image.png"></p><h1 id="vue3-typescript创建项目详细步骤"><a href="#vue3-typescript创建项目详细步骤" class="headerlink" title="vue3+typescript创建项目详细步骤"></a>vue3+typescript创建项目详细步骤</h1><p>1、新建一个文件夹；</p><p>2、vue&#x2F;cli全局安装：cnpm install -g @vue&#x2F;cli 或者 npm install -g @vue&#x2F;cli；<br>3、创建项目名称：vue create 项目名称；<br>4、配置文件（根据个人喜好选择）：<br>如图：<br>1）、第一个选项是预设配置项，第一个只包含babel，eslint，要选第二个，可以自由配置。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911559248-dcd4417e-7f61-4ca5-bde7-e627fe4438b9.png#clientId=u5bfd2b6e-665d-4&from=paste&id=ub53752cc&name=image.png&originHeight=178&originWidth=315&originalType=url&ratio=1&rotation=0&showTitle=false&size=35578&status=done&style=none&taskId=u45f26637-326f-4562-b060-fe8ca53de4a&title=" alt="image.png"></p><p>选择第二项，出现如图配置（空格搭配上下键选择）：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911559274-6512b9ee-3f56-4a4f-a1cb-b87b992d1c0a.png#clientId=u5bfd2b6e-665d-4&from=paste&id=uee65d25c&name=image.png&originHeight=300&originWidth=379&originalType=url&ratio=1&rotation=0&showTitle=false&size=89240&status=done&style=none&taskId=uf6d41c82-5046-4aa7-9050-439a58a6eb3&title=" alt="image.png"></p><p>babel是用来适配一些js的新特性，浏览器还不支持的，但是可以通过其它方式实现它的语法<br>typescript就是启用typescript支持<br>PWA这个是渐进式web应用，如果用不上，不需要选<br>Router是vue-router<br>css pre-processors是用来支持css预处理器的，less，sass这些<br>linter是用来做代码检验的，如代码缩进，规范合不合格之类的，都是它来校验<br>2）、这2个是自动化测试框架，可以不选；测试代码有没有bug，符不符合预期用的</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911559230-50b3372e-902d-4567-beb5-f91cf8426248.png#clientId=u5bfd2b6e-665d-4&from=paste&id=ua94b05b1&name=image.png&originHeight=48&originWidth=188&originalType=url&ratio=1&rotation=0&showTitle=false&size=1608&status=done&style=none&taskId=ua4a93531-7d00-4adf-ac10-77f3f9876c2&title=" alt="image.png"></p><p>3）、class-style component syntax，像react的风格，是否启用类作为组件模型，这个建议开启。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911559241-e0b0114f-800b-4ca1-98bf-9e59355e22bf.png#clientId=u5bfd2b6e-665d-4&from=paste&id=u4fe58782&name=image.png&originHeight=84&originWidth=422&originalType=url&ratio=1&rotation=0&showTitle=false&size=47054&status=done&style=none&taskId=uc74dfba9-180c-4cc4-ab3f-3672590d6e3&title=" alt="image.png"></p><p>4）、配置babel对ts，jsx的转义，要开启</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911559362-ff5ffe3a-3621-4b4d-ac6e-1e860eee5d28.png#clientId=u5bfd2b6e-665d-4&from=paste&id=u859e6e6e&name=image.png&originHeight=32&originWidth=506&originalType=url&ratio=1&rotation=0&showTitle=false&size=11155&status=done&style=none&taskId=u3e1b4970-f128-4427-8118-b3593cf01b4&title=" alt="image.png"></p><p>5）、路由管理模式，Y是HTML5 history，N是hash模式</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911559723-e9957012-7d67-4305-aefb-ca5e755fc5bc.png#clientId=u5bfd2b6e-665d-4&from=paste&id=u4a5131a7&name=image.png&originHeight=37&originWidth=479&originalType=url&ratio=1&rotation=0&showTitle=false&size=11580&status=done&style=none&taskId=uf4b0bbfc-40d7-41f4-bd23-f37a2efeff4&title=" alt="image.png"></p><p>6）、预处理器，根据自己习惯选择；</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911559967-0378bf0d-9c4e-4144-9607-761984e5a8f8.png#clientId=u5bfd2b6e-665d-4&from=paste&id=u48507214&name=image.png&originHeight=198&originWidth=461&originalType=url&ratio=1&rotation=0&showTitle=false&size=84586&status=done&style=none&taskId=u90939516-03aa-432f-9627-86ed1fbc2e2&title=" alt="image.png"></p><p>7）、这个是代码风格约束的选择项;</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911560102-5da75acb-52cc-4735-89ef-ed06c31ab5eb.png#clientId=u5bfd2b6e-665d-4&from=paste&id=ua3783cca&name=image.png&originHeight=135&originWidth=547&originalType=url&ratio=1&rotation=0&showTitle=false&size=79429&status=done&style=none&taskId=u0636e733-b09d-42d4-b9b3-e269e22d72f&title=" alt="image.png"></p><p>8）、对git提交时候的风格校验；第一个是保存的时候，第二个是commit的时候推荐2个都开启</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911560167-01cb141b-a74f-4e70-a7fd-bb071e18085c.png#clientId=u5bfd2b6e-665d-4&from=paste&id=u4aa23197&name=image.png&originHeight=86&originWidth=367&originalType=url&ratio=1&rotation=0&showTitle=false&size=21791&status=done&style=none&taskId=u28a6e631-5baa-40bd-a308-24b8b781914&title=" alt="image.png"></p><p>9）、置配置文件的管理路径，建议选第一个，每一个单独生成配置文件，第二个都会堆在package.json，</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911560392-324275bb-c592-4e76-b35e-c5e6432ca0ee.png#clientId=u5bfd2b6e-665d-4&from=paste&id=u5658ca60&name=image.png&originHeight=100&originWidth=567&originalType=url&ratio=1&rotation=0&showTitle=false&size=56897&status=done&style=none&taskId=u50fa05cb-21e7-4091-af1a-386b165341f&title=" alt="image.png"></p><p>10）、把这些配置是否保存为模板，选择N</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911560394-e1a1020c-8863-471b-98fb-9aed7ae5d6b7.png#clientId=u5bfd2b6e-665d-4&from=paste&id=ue4c1a515&name=image.png&originHeight=63&originWidth=373&originalType=url&ratio=1&rotation=0&showTitle=false&size=27037&status=done&style=none&taskId=uf5e42449-fd60-44cd-a898-47731d84764&title=" alt="image.png"></p><p>11）、成功创建项目；</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1663911560996-1354937e-351a-48b0-805c-c4eed1e6b776.png#clientId=u5bfd2b6e-665d-4&from=paste&id=uc0e4eb30&name=image.png&originHeight=109&originWidth=457&originalType=url&ratio=1&rotation=0&showTitle=false&size=57206&status=done&style=none&taskId=u20e03c0a-0480-40b1-a87f-a0ed18406bb&title=" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-vue3-0与vue2-0区别&quot;&gt;&lt;a href=&quot;#1-vue3-0与vue2-0区别&quot; class=&quot;headerlink&quot; title=&quot;1.vue3.0与vue2.0区别&quot;&gt;&lt;/a&gt;1.vue3.0与vue2.0区别&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;vue2</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="http://example.com/salty.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序 webview 与 h5 的通信</title>
    <link href="http://example.com/salty.github.io/2022/12/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20webview%20%E4%B8%8E%20h5%20%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>http://example.com/salty.github.io/2022/12/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20webview%20%E4%B8%8E%20h5%20%E7%9A%84%E9%80%9A%E4%BF%A1/</id>
    <published>2022-12-21T16:00:00.000Z</published>
    <updated>2023-03-24T06:54:11.532Z</updated>
    
    <content type="html"><![CDATA[<p>参考资料<br><a href="https://blog.csdn.net/m0_37792384/article/details/115952370">Uniapp 内嵌H5跳转内嵌小程序页面</a><br><a href="https://blog.csdn.net/rxh13543515695/article/details/124980667">uniapp h5项目点击跳转小程序，h5传参到小程序</a><br><a href="https://blog.csdn.net/m0_56712653/article/details/117741481">微信小程序与h5通过web-view传值</a><br><a href="https://developers.weixin.qq.com/community/develop/article/doc/000a0ce2858618976b0a2df3b5bc13">[填坑手册]小程序web-view组件实战与踩坑</a></p><p>首先因为微信小程序无法打开本地资源管理器。所以都是通过微信的<code>wx.chooseMessageFile</code>进行在本地聊天记录中选取文件。（这种方法也是目前大部分小程序采取上传文件的方式优点是：速度快、兼容性好。缺点：用户需要提前把文件发送给自己聊天列表中的随便一个人）<br><code>wx.chooseMessageFile</code>代码实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">wx.chooseMessageFile(&#123;<br>  count: 10,<br>  type: &#x27;file&#x27;, //选择了除图片和视频的文件<br>  success (res) &#123;<br>    // tempFilePath可以作为 img 标签的 src 属性显示图片<br>    const tempFilePaths = res.tempFiles<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>现在需要直接通过微信小程序去访问本地的资源管理器。我的解决思路的是，通过微信小程序使用webview去调用一个h5页面。在通过h5页面去调用本地资源。选取后将资源上传服务器，在返回到小程序。这里比较困难的是小程序向webview传值以及webview跳回小程序，以及返回参数到小程序。</p><p>这里首先需要写一个h5的页面进行上传文件,这里需要引入小程序的一个sdk,uniapp使用 <code>npm install --save-dev weixin-js-sdk</code>。然后在main.js里进行全局引入<code>let jweixin = require(&#39;jweixin-module&#39;)</code> <code>Vue.prototype.$wx = jweixin</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;template&gt;<br>&lt;view class=&quot;content&quot;&gt;<br>&lt;view class=&quot;add-btn&quot;&gt;<br>&lt;text class=&quot;text&quot; @click=&quot;openFile&quot;&gt;添加附件&lt;/text&gt;<br>&lt;/view&gt;<br>&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import wx from &#x27;@/static/activity_sdk.js&#x27;;<br>export default &#123;<br>data() &#123;<br>return &#123;<br>title: &#x27;Hello&#x27;,<br>id: &#x27;&#x27;,<br>token: &#x27;&#x27;<br>&#125;<br>&#125;,<br>methods: &#123;<br>// 打开文件选择器<br>openFile() &#123;<br>let that = this<br>uni.chooseFile(&#123;<br>count: 1, //默认100<br>extension: [&#x27;.mp3&#x27;, &#x27;.m4a&#x27;],<br>success: (res) =&gt; &#123;<br>console.log(res);<br>if (res.tempFiles[0].size / 1024 / 1024 &gt; 20) &#123;<br>that.$refs.uToast.show(&#123;<br>title: &#x27;附件大小不能超过20M&#x27;,<br>type: &#x27;warning&#x27;,<br>&#125;)<br>return;<br>&#125;<br>var params = &#123;<br>path: res.tempFilePaths[0],<br>name: res.tempFiles[0].name,<br>orderid: 0,<br>&#125;<br>that.uploadFile(params);<br>&#125;<br>&#125;);<br>&#125;,<br><br>uploadFile(params, noRefetch) &#123;<br>uni.showLoading(&#123;<br>title: &#x27;上传中...&#x27;,<br>&#125;);<br>var that = this;<br>var url = &#x27;https://dub.wuhanzhuangxiu01.cn/uploadMusic&#x27;;<br>var name = params.name ? params.name : &#x27;&#x27;;<br>var key = params.key ? params.key : &#x27;&#x27;;<br>var ii = params.ii ? params.ii : 0;<br>var orderid = params.orderid ? params.orderid : 0;<br>var id = that.id ? that.id : 0;<br>uni.uploadFile(&#123;<br>url: url,<br>filePath: params.path,<br>fileType: &#x27;audio&#x27;,<br>name: &#x27;file&#x27;,<br>header: &#123;<br>&#x27;token&#x27;: that.token,<br>&#125;,<br>formData: &#123;<br>&#x27;path&#x27;: params.path,<br>&#x27;name&#x27;: name,<br>&#x27;key&#x27;: key,<br>&#x27;ii&#x27;: ii,<br>&#x27;uid&#x27;: id,<br>&#x27;orderid&#x27;: orderid<br>&#125;,<br>success: function(res) &#123;<br>var data = JSON.parse(res.data);<br>uni.hideLoading();<br>that.$wx.miniProgram.postMessage(&#123;<br>data: &#123;<br>name: data,<br>&#125;<br>&#125;);<br>that.$wx.miniProgram.navigateBack(&#123;<br>delta: 1<br>&#125;)<br>&#125;,<br>fail: function(res) &#123;<br>console.log(&#x27;fail:&#x27;, res);<br>uni.hideLoading();<br>uni.showLoading(&#123;<br>title: &#x27;上传失败&#x27;,<br>icon: &#x27;error&#x27;<br>&#125;);<br>that.$wx.miniProgram.navigateBack(&#123;<br>delta: 1<br>&#125;)<br>&#125;,<br>&#125;)<br>&#125;,<br>&#125;,<br>onLoad(e) &#123;<br>console.log(&#x27;h5页面&#x27;, e);<br>this.id = e.id<br>this.token = e.token<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.add-btn &#123;<br>width: 100%;<br>height: 100vh;<br>display: flex;<br>justify-content: center;<br>align-items: center;<br><br>&#125;<br><br>.add-btn text &#123;<br>display: block;<br>text-align: center;<br>line-height: 100rpx;<br>width: 80%;<br>height: 100rpx;<br>background-color: cadetblue;<br>border-radius: 20rpx;<br>/* margin: 0 auto; */<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>这里从webview的网页跳回小程序有个问题。就是只能用<code>navigateBack</code>进行返回。原因不明。文档上说的是navigateTo、navigateBack、switchTab、reLaunch、redirectTo都能使用，但是在我的环境下只能使用<code>navigateBack</code>进行返回。传值我是通过webview的bindmessage属性进行传值。首先在webview定义好属性写好回调。在h5页面，使用wx.miniProgram.postMessage来进行传值。传的值会在 bindmessage定义好的函数里形参里。<br>因为之前我是使用 <code>navigateBack</code>进行返回的。所以返回的值一直在webview页面。我需要传值给我的返回的这个界面。我在app.js里面定义一个属性进行页面之间的通信。在webview页面接受传回来的值，存放在app.js上面的属性。在跳转的页面进行拿取传过来的值。就能完成从webview传值给微信小程序。</p><p>微信小程序webview示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;!-- wxml部分 --&gt;<br>&lt;web-view src=&quot;&#123;&#123;&#x27;https://dub.wuhanzhuangxiu01.cn/uploading/upload/&#x27;+&#x27;#/?id=&#x27;+id+&#x27;&amp;token=&#x27;+token&#125;&#125;&quot; bindload=&quot;load&quot; bindmessage=&quot;msgHandler&quot;&gt;&lt;/web-view&gt;<br>&lt;!-- js部分 --&gt;<br>let app = getApp()<br>Page(&#123;<br><br>  /**<br>   * 页面的初始数据<br>   */<br>  data: &#123;<br>    id:&quot;&quot;,<br>    token:&quot;&quot;<br>  &#125;,<br>  //可以捕获到url的监听事件函数<br>  load: function (e) &#123;<br>    // 获取url<br>    const src = e.detail.src;<br>    console.log(src);<br>  &#125;,<br>  &lt;!-- 通信函数 --&gt;<br>  msgHandler: function (e) &#123; //(h5像小程序传递参数）<br>    console.log(&#x27;传回的值&#x27;,e.detail.data[0]) //获取到来自也页面的数据<br>    app.muName = e.detail.data[0]<br><br>  &#125;,<br>  /**<br>   * 生命周期函数--监听页面加载<br>   */<br>  onLoad(options) &#123;<br>    this.setData(&#123;<br>      id:options.id,<br>      token:options.token<br>    &#125;)<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>这部分代码中的wxml部分，src部分不要问我怎么写这么复杂，我也不想写这么复杂。我试了无数次，只有这么写，才能带参数，访问这个h5页面。之前我是先将url合并之后一块给src,但是这个h5会在链接自动生成<code>#</code>在路径里。然后微信这边会自动将#号过滤掉。这个#号是因为路由器的两种工作模式之一的hash模式造成的。</p><blockquote><p>hash ——即地址栏URL中的#符号。 hash 虽然出现URL中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。</p></blockquote><blockquote><p>history ——利用了HTML5 History Interface 中新增的pushState() 和replaceState() 方法。需要特定浏览器支持 history模式，会出现404 的情况，需要后台配置。</p></blockquote><blockquote><p>hash模式下，仅hash符号之前的内容会被包含在请求中，如 <code>https://www.shopwind.net</code>, 因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回404错误；</p></blockquote><blockquote><p>history模式下，前端的url必须和实际向后端发起请求的url 一致，如<code>https://www.shopwind.net/a/</code> 。如果后端缺少对&#x2F;a 的路由处理，将返回404错误</p></blockquote><p>详解可见 <a href="https://blog.csdn.net/qq_37109041/article/details/118962254">Uniapp发布为H5版本时如何隐藏访问路径的#符号</a></p><p>因为我这边后端是别人搭好的，如果要改，可能有连锁反应，所以我最后，在不断百度，不断百度，不断百度。最后在犄角旮旯找到一篇文章，在文章的评论里找到一条评论，让我在webview里直接将<code>#/</code>以字符串的形式加进去，能直接访问。于是就有了这部分内容。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考资料&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/m0_37792384/article/details/115952370&quot;&gt;Uniapp 内嵌H5跳转内嵌小程序页面&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="js" scheme="http://example.com/salty.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>全局开启分享代码封装</title>
    <link href="http://example.com/salty.github.io/2022/12/12/%E5%85%A8%E5%B1%80%E5%BC%80%E5%90%AF%E5%88%86%E4%BA%AB%E4%BB%A3%E7%A0%81%E5%B0%81%E8%A3%85/"/>
    <id>http://example.com/salty.github.io/2022/12/12/%E5%85%A8%E5%B1%80%E5%BC%80%E5%90%AF%E5%88%86%E4%BA%AB%E4%BB%A3%E7%A0%81%E5%B0%81%E8%A3%85/</id>
    <published>2022-12-11T16:00:00.000Z</published>
    <updated>2023-03-24T06:53:13.768Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">export default &#123;<br>data() &#123;<br>return &#123;<br>//设置默认的分享参数<br>//如果页面不设置share，就触发这个默认的分享<br>share: &#123;<br>title: &#x27;翻译小程序&#x27;,<br>path: `/pages/index/index`,  //默认跳转首页<br>imageUrl: &#x27;&#x27;,  //可设置默认分享图，不设置默认截取头部5:4<br>&#125;<br>&#125;<br>&#125;,<br>onShareAppMessage(res) &#123; //发送给朋友<br>return &#123;<br>title: this.share.title,<br>path: this.share.path,<br>imageUrl: this.share.imageUrl,<br>success(res) &#123;<br>console.log(&#x27;success(res)==&#x27;, res);<br>uni.showToast(&#123;<br>title: &#x27;分享成功&#x27;<br>&#125;)<br>&#125;,<br>fail(res) &#123;<br>console.log(&#x27;fail(res)==&#x27;, res);<br>uni.showToast(&#123;<br>title: &#x27;分享失败&#x27;,<br>icon: &#x27;none&#x27;<br>&#125;)<br>&#125;<br>&#125;<br>&#125;,<br>onShareTimeline(res) &#123; //分享到朋友圈<br>return &#123;<br>title: this.share.title,<br>path: this.share.path,<br>imageUrl: this.share.imageUrl,<br>success(res) &#123;<br>console.log(&#x27;success(res)==&#x27;, res);<br>uni.showToast(&#123;<br>title: &#x27;分享成功&#x27;<br>&#125;)<br>&#125;,<br>fail(res) &#123;<br>console.log(&#x27;fail(res)==&#x27;, res);<br>uni.showToast(&#123;<br>title: &#x27;分享失败&#x27;,<br>icon: &#x27;none&#x27;<br>&#125;)<br>&#125;<br>&#125;<br>&#125;,<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="小程序" scheme="http://example.com/salty.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>巨焰小程序接入订阅消息</title>
    <link href="http://example.com/salty.github.io/2022/12/02/%E5%B7%A8%E7%84%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%85%A5%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF/"/>
    <id>http://example.com/salty.github.io/2022/12/02/%E5%B7%A8%E7%84%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%85%A5%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF/</id>
    <published>2022-12-01T16:00:00.000Z</published>
    <updated>2023-03-24T06:51:51.531Z</updated>
    
    <content type="html"><![CDATA[<h2 id="巨焰小程序接入订阅消息"><a href="#巨焰小程序接入订阅消息" class="headerlink" title="巨焰小程序接入订阅消息"></a>巨焰小程序接入订阅消息</h2><p>页面 index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">code</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-attr">templateid</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-attr">appid</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-attr">openid</span>:<span class="hljs-string">&#x27;&#x27;</span><br>&#125;,<br><br><span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span><br><span class="hljs-comment">//开始获取code</span><br>that.<span class="hljs-title function_">onCode</span>()<br><span class="hljs-comment">//三秒后弹窗让用户订阅</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>wx.<span class="hljs-title function_">showModal</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;提示&#x27;</span>,<br><span class="hljs-attr">content</span>: <span class="hljs-string">&#x27;是否订阅XXXX消息&#x27;</span>,<br><span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br><span class="hljs-keyword">if</span> (res.<span class="hljs-property">confirm</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用户点击确定&#x27;</span>)<br>that.<span class="hljs-title function_">onTake</span>()<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">cancel</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用户点击取消&#x27;</span>)<br>that.<span class="hljs-title function_">onTake</span>()<br>&#125;<br>&#125;<br>&#125;)<br>&#125;, <span class="hljs-number">3000</span>)<br>&#125;<br><span class="hljs-comment">//获取code</span><br><span class="hljs-title function_">onCode</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始获取Code&#x27;</span>);<br><span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span><br>wx.<span class="hljs-title function_">login</span>(&#123;<br><span class="hljs-attr">timeout</span>: <span class="hljs-number">10000</span>,<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>that.<span class="hljs-title function_">setData</span>(&#123;<br><span class="hljs-attr">code</span>: res.<span class="hljs-property">code</span><br>&#125;)<br>&#125;,<br>&#125;)<br>&#125;,<br><span class="hljs-comment">// 发起订阅消息</span><br><span class="hljs-title function_">onTake</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始订阅&#x27;</span>);<br><span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span><br><span class="hljs-keyword">let</span> accountInfo = wx.<span class="hljs-title function_">getAccountInfoSync</span>();<br><span class="hljs-keyword">let</span> appid = accountInfo.<span class="hljs-property">miniProgram</span>.<span class="hljs-property">appId</span>;<br><span class="hljs-comment">// 获取模板id</span><br>wx.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://newsaas.guangzhouzhuangxiu01.cn/api/xcx/index/xcxsubtemplate&#x27;</span>,<br><span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">wxappid</span>: appid<br>&#125;,<br><span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>]);<br>that.<span class="hljs-title function_">setData</span>(&#123;<br><span class="hljs-attr">templateid</span>: res.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>].<span class="hljs-property">templateid</span>,<br>appid,<br>&#125;)<br>wx.<span class="hljs-title function_">requestSubscribeMessage</span>(&#123;<br><span class="hljs-attr">tmplIds</span>: [that.<span class="hljs-property">data</span>.<span class="hljs-property">templateid</span>],<br><span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>) &#123;<br><span class="hljs-keyword">if</span> (res[that.<span class="hljs-property">data</span>.<span class="hljs-property">templateid</span>] === <span class="hljs-string">&#x27;accept&#x27;</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用户同意了&#x27;</span>)<br><span class="hljs-comment">// 订阅小程序获取用户openid</span><br>wx.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://newsaas.guangzhouzhuangxiu01.cn/api/xcx/index/getwxopenid&#x27;</span>,<br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-attr">appId</span>: appid,<br><span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;132&#x27;</span>,<br><span class="hljs-attr">tmplIds</span>: that.<span class="hljs-property">data</span>.<span class="hljs-property">templateid</span>,<br><span class="hljs-attr">code</span>: that.<span class="hljs-property">data</span>.<span class="hljs-property">code</span><br>&#125;,<br><span class="hljs-title function_">success</span>(<span class="hljs-params">res1</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;订阅完成：&#x27;</span>, res1);<br>wx.<span class="hljs-title function_">showToast</span>(&#123;<br><span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;订阅OK！&#x27;</span>,<br><span class="hljs-attr">duration</span>: <span class="hljs-number">1000</span>,<br>&#125;)<br>that.<span class="hljs-title function_">setData</span>(&#123;<br><span class="hljs-attr">openid</span>: res1.<span class="hljs-property">data</span>.<span class="hljs-property">openid</span><br>&#125;)<br>&#125;<br>&#125;)<br>&#125;<br>&#125;,<br>&#125;)<br>&#125;<br>&#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;巨焰小程序接入订阅消息&quot;&gt;&lt;a href=&quot;#巨焰小程序接入订阅消息&quot; class=&quot;headerlink&quot; title=&quot;巨焰小程序接入订阅消息&quot;&gt;&lt;/a&gt;巨焰小程序接入订阅消息&lt;/h2&gt;&lt;p&gt;页面 index.js&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="小程序" scheme="http://example.com/salty.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>拖拉拽</title>
    <link href="http://example.com/salty.github.io/2022/12/02/%E6%8B%96%E6%8B%89%E6%8B%BD/"/>
    <id>http://example.com/salty.github.io/2022/12/02/%E6%8B%96%E6%8B%89%E6%8B%BD/</id>
    <published>2022-12-01T16:00:00.000Z</published>
    <updated>2023-03-24T06:53:48.057Z</updated>
    
    <content type="html"><![CDATA[<p>推拉拽</p><p>如下图效果：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1668062837488-4a4b10e8-f65a-4ec6-85c5-aa9cf3dc1f00.png#"><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1668062838811-fc97afbf-56d6-4420-9dfc-0879a82a561f.png#"><br>备注：上图右边的小程序的样式 是随左边的后台模板设计而动态的改变的</p><p>要想实现整个流程 特从2大环节来分享</p><p>第一环节<br>后台模板设计：<br>使用技术要点：</p><ol><li>非vue项目使用  sortable.js</li><li>Vue项目 使用vuedraggable组件</li></ol><p>(实现拖拽)</p><p>非vue项目</p><script src="https://www.itxst.com/package/sortable/sortable.min.js"></script><p>Vue项目<br>Npm install vuedraggable<br>import draggable from ‘vuedraggable’</p><p>不管是vue项目还是非vue项目   底层实现拖拽的逻辑大致一样,如下：<br>先用一个大的元素  把需要拖拽的元素包裹起来，再去安排每一个需要拖动的元素<br>例如：<br>（一）非vue项目（最外层指定一个属性id  此处为contentltm）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1668062839715-39e8508d-fba2-42d6-8806-4ee3cf40848c.png#"><br>然后在js代码指定这个元素里面具体那些子元素可以拖动  一般为div<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1668062840647-6d1d1ee9-4bb8-49f8-a975-2e6e0c02394e.png#"><br>（二）vue项目<br>当安装好vuedragable组件后 最外层的大元素不再是原生的div  而转为draggable组件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1668062842567-e012b457-cd27-4132-acf0-d9a85f85c0a2.png#"></p><p>该组件参数参考开发文档<br><a href="https://sortablejs.github.io/Vue.Draggable/#/clone">https://sortablejs.github.io/Vue.Draggable/#/clone</a><br>以下已几个重要的参数 稍微讲解一下<br>list 此为一个数组   里面每一个值就是一个元素<br>change事件 当我们试图改变元素的位置时触发<br>add事件  当添加元素时触发<br>end事件  当移动整个元素结束时触发</p><p>如上：则可以实现元素的拖动效果<br>测试demo连接：<br>非vue项目：<br><a href="https://newsaas.guangzhouzhuangxiu01.cn/CIPKeogzAx.php/index/shopdesign/ids/5?ref=addtabs">https://newsaas.guangzhouzhuangxiu01.cn/CIPKeogzAx.php/index/shopdesign/ids/5?ref=addtabs</a><br>vue项目：<br><a href="https://saas.guangzhouzhuangxiu01.cn/vuedrag/dist">https://saas.guangzhouzhuangxiu01.cn/vuedrag/dist</a></p><p>以上我们完成了在页面上实现拖拽的功能 ，自此我们是可以让用户自由的搭建他们想要的排版的样式，那么就引出了第二步的问题 </p><p>假想一下：我们实现定义好了20个div  对应着20个不同的组件  每个组件里面有着属于组件自己的功能   此时 当用户随机在这个20个div里找到自己想要的  并对这些进行了拖拉拽排序 ，那么用户的小程序又要如何按照用户设计的那样显示出来。</p><p>第一步 我们先要保存好用户已经设计好了界面 那么要用什么样的格式来保存数据</p><ol><li>数组 单纯的保留组件的名称  所有的组件功能是写死的  只给用户排版的能力（公司买的花店小程序后台）</li><li>Json数组 把组件名称 和 组件所需要的数据  全部存放其中，这样用户的体验更加灵活但是代码就会更加的冗余</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1668062843119-2528a6f5-e152-466c-948d-766d7061fe08.png#"></p><p>我们把用户排版好的数据按照json的形式存放到数据库，当页面渲染时 通过wxappid调用获取到这个json数组 就可以了</p><p>到此 整个流程看似结束了 ，但是坑来了</p><p>我们需要界面动态的渲染这些后端返回给我们的组件<br>首先 我们百度下vue 是如何动态渲染组件的<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/29366599/1668062844186-4726315e-3f0d-4ada-acc2-58339338e9c5.jpeg#"></p><p>可以看到 vue是通过compontent 来根据组件名 动态渲染组件，但不幸的是  小程序不支持compontent  当你使用时会飘红</p><p>不能用compontent来实现动态渲染组件  只有用最原生的办法  通过for循环来加载我们的组件<br>方法如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1668062846581-ac0d3af2-3cef-4444-aca3-4b47f6613127.png#"><br>先定义并导入我们写好的组件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1668062847433-595f812d-f392-42ea-88f2-dcf361ad437f.png#"><br>页面加载时通过接口获取到用户自己定义的组件列表</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1668062848302-1cbb313d-84fc-44b3-a8b6-6a8831912ee9.png#"><br>通过for循环来加载我们的组件  注意 v-if 根据组件名来判断显不显示它</p><p>到此为止  我们已经实现了一个小型的凡科网</p><p>最后送给摸鱼的大家一句话：</p><p><strong>让代码帮我们办事</strong><br><strong>别让我们写代码办事</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;推拉拽&lt;/p&gt;
&lt;p&gt;如下图效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2022/png/29366599/1668062837488-4a4b10e8-f65a-4ec6-85c5-aa9cf3dc1f00.png</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="js" scheme="http://example.com/salty.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>数据结构与算法</title>
    <link href="http://example.com/salty.github.io/2022/12/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/salty.github.io/2022/12/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2022-12-01T16:00:00.000Z</published>
    <updated>2023-03-24T06:53:13.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h1><p><strong>数据结构是指相互之间存在一种或多种特定关系数据元素的集合</strong></p><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p><strong>数据对象中数据元素之间的相互关系</strong><br>① <strong>集合结构</strong>：数据元素之间的<strong>唯一关系</strong>就是<strong>属于同一个集合</strong><br>② <strong>线性结构</strong>：数据元素之间存在<strong>一对一</strong>的关系（除首尾元素均存在前驱和后继）<br>③ <strong>树形结构</strong>：数据元素之间存在<strong>一对多</strong>的关系<br>④ <strong>图形结构</strong>：数据元素之间存在<strong>多对多</strong>的关系</p><ul><li>（每一个数据元素看做一个节点，元素之间的逻辑关系用连线表示，如果关系有方向则连线带箭头）</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29365957/1673502677853-b63ba664-53c2-421e-8c4a-26a8392a4e9f.png#averageHue=%231a1616&clientId=uaa0f43b3-71fa-4&from=paste&id=u69ea4797&originHeight=191&originWidth=934&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u51ec3a85-cd18-486d-aac6-f2467f10c5e&title="></p><h2 id="物理结构-存储结构"><a href="#物理结构-存储结构" class="headerlink" title="物理结构(存储结构)"></a>物理结构(存储结构)</h2><p><strong>数据的逻辑结构关系在计算机中的存储形式</strong><br>① <strong>顺序存储结构</strong>：把元素分别放在地址连续的存储单元中的存储方式</p><ul><li>也就是说：元素一个一个有序的排好队，各自占据一定的空间，例如定义一个含有6个浮点型数据的数组：然后内存中的一块大小为6个浮点型数据大小空间就会被计算机所开辟，然后数据存入时，依次顺序摆入</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29365957/1673502739913-0e2e62ae-0835-490e-b087-bcae17d7c7d3.png#averageHue=%234a4a54&clientId=uaa0f43b3-71fa-4&from=paste&id=u7e741ad3&originHeight=105&originWidth=394&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u59f2c291-0fa5-44f3-a1f2-daf9cb27a9c&title="><br>② <strong>链式存储结构</strong>：把元素存储在任意的存储单元中的存储方式</p><ul><li>因为数据元素位置不确定，所以需要通过指针指向到元素的存储地址，从而确定不同数据元素之间的位置</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29365957/1673502784225-5bd0fcdb-4699-4675-8e4e-7eaae7ad4160.png#averageHue=%23141111&clientId=uaa0f43b3-71fa-4&from=paste&id=u8f09a084&originHeight=158&originWidth=397&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uddbea527-d968-4038-b6b6-2180f36007d&title="><br>③ <strong>散列 (哈希) 存储方式</strong>：是一种力图将数据元素的存储位置与关键码之间建立确定对应关系的查找技术</p><ul><li>它的原理就是，将一个节点的关键字key作为自变量，通过一个确定的函数运算f(key)，其函数值作为节点的存储地址，将节点存入到指定的位置上，查找的时候，被搜索的关键字会再次通过f(key)函数计算地址，然后读取对应数据</li></ul><p>④ <strong>索引存储方式</strong>：存储时，除了存储节点，还附加建立了索引表来表示节点的地址</p><h1 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h1><h2 id="算法的特征"><a href="#算法的特征" class="headerlink" title="算法的特征"></a>算法的特征</h2><ul><li><strong>输入</strong>：算法具有<strong>零个</strong>或者多个输入（零个的情况例如打印输出字符串，或者算法自身已经给定了初始条件）</li><li><strong>输出</strong>：算法具有<strong>一个</strong>或者多个输出，用来反映算法对输入数据加工后的结果</li><li><strong>有穷性</strong>：算法必须在执行有限个步骤后终止，“有限” 的定义不是绝对的，而是实际应用中合理的可接受的</li><li><strong>确定性</strong>： 算法的每一步骤都具有确定的含义，不会出现二义性<ul><li>也就是说，唯一的输入只有唯一的输出</li></ul></li><li><strong>可行性</strong>：算法的每一步都是可行的，通过有限步骤可以实现</li></ul><h2 id="算法的设计要求"><a href="#算法的设计要求" class="headerlink" title="算法的设计要求"></a>算法的设计要求</h2><ul><li><strong>正确性</strong>：合理的数据输入下，最终可以输出能解决问题需求的正确答案<ul><li>对正确的理解：<ul><li>无语法错误</li><li>输入合法和非法的数据均可以得到正确答案</li><li>输入刁难的数据依旧可以输出满足需要的答案</li></ul></li></ul></li><li><strong>可读性</strong>：算法便于阅读和理解<ul><li>算法应该层次分明，易读易懂，方便二次调试和修改</li><li>复杂一些的算法，变量的命名尽量恰当一些，用阿里的开发手册中的一句话就是说：<strong>“正确的英文拼写和语法可以让阅读者易与理解避免歧义”</strong>，<strong>“为了达到代码自解释的目标，任何自定义编程元素在命名时，使用尽量完整的单词组合来表达其意”</strong></li></ul></li><li><strong>健壮性</strong>：当数据不合理的时候，算法也能对各种情况作出处理，而不是报出异常，或者输出错误的答案</li><li><strong>高效性</strong>：尽量满足时间效率高，存储率低的需求</li></ul><h2 id="算法的时间复杂度"><a href="#算法的时间复杂度" class="headerlink" title="算法的时间复杂度"></a>算法的时间复杂度</h2><p><strong>时间复杂度通常用来衡量算法的运行时间</strong><br>算法的时间复杂度是一个函数 T(n)，它定性描述该算法的运行时间，通常用大O表示法。<br>记作：T(n) &#x3D; O(f(n)) 例如3n² + 2n + 1 的时间复杂度为 O(n²)<br>常见的时间复杂度量级有：</p><ul><li>常数阶O(1)</li><li>对数阶O(logN)</li><li>线性阶O(n)</li><li>线性对数阶O(nlogN)</li><li>平方阶O(n²)</li><li>立方阶O(n³)</li><li>K次方阶O(n^k)</li><li>指数阶(2^n)</li></ul><p>上面从上至下依次的时间复杂度越来越大，执行的效率越来越低。</p><h3 id="常数阶O-1"><a href="#常数阶O-1" class="headerlink" title="常数阶O(1)"></a><strong>常数阶O(1)</strong></h3><p>无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">2</span>;<br>++i;<br>j++;<br><span class="hljs-type">int</span> m = i + j;<br></code></pre></td></tr></table></figure><h3 id="线性阶O-n"><a href="#线性阶O-n" class="headerlink" title="线性阶O(n)"></a><strong>线性阶O(n)</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>&#123;<br>   j = i;<br>   j++;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)来表示它的时间复杂度。</p><h3 id="对数阶O-logN"><a href="#对数阶O-logN" class="headerlink" title="对数阶O(logN)"></a><strong>对数阶O(logN)</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;n)<br>&#123;<br>    i = i * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。那么假设循环x次之后，i 就大于 2 了，此时这个循环就退出了。也就是说有 x 个 2 相乘后大于 n，则会退出循环。表示出来就是 2^x&#x3D;n，得到 x &#x3D; log2^n。因此这个代码的时间复杂度为：<strong>O(logn)</strong></p><h3 id="线性对数阶O-nlogN"><a href="#线性对数阶O-nlogN" class="headerlink" title="线性对数阶O(nlogN)"></a><strong>线性对数阶O(nlogN)</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(m=<span class="hljs-number">1</span>; m&lt;n; m++)<br>&#123;<br>    i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;n)<br>    &#123;<br>        i = i * <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN)。</p><h3 id="平方阶O-n²"><a href="#平方阶O-n²" class="headerlink" title="平方阶O(n²)"></a><strong>平方阶O(n²)</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(x=<span class="hljs-number">1</span>; i&lt;=n; x++)<br>&#123;<br>   <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>    &#123;<br>       j = i;<br>       j++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码其实就是嵌套了2层n循环，它的时间复杂度就是 O(n*n)，即 O(n²)<br>如果将其中一层循环的n改成m，即：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(x=<span class="hljs-number">1</span>; i&lt;=m; x++)<br>&#123;<br>   <span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; i++)<br>    &#123;<br>       j = i;<br>       j++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那它的时间复杂度就变成了 O(m*n)</p><h3 id="立方阶O-n³-和K次方阶O-n-k"><a href="#立方阶O-n³-和K次方阶O-n-k" class="headerlink" title="立方阶O(n³)和K次方阶O(n^k)"></a><strong>立方阶O(n³)<strong>和</strong>K次方阶O(n^k)</strong></h3><p>参考上面的O(n²) 去理解就好了，O(n³)相当于三层n循环，其它的类似。</p><h2 id="算法的空间复杂度"><a href="#算法的空间复杂度" class="headerlink" title="算法的空间复杂度"></a>算法的空间复杂度</h2><p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，我们用 S(n) 来定义。<br>空间复杂度比较常用的有：O(1)、O(n)、O(n²)</p><h3 id="时间复杂度大小排序"><a href="#时间复杂度大小排序" class="headerlink" title="时间复杂度大小排序"></a>时间复杂度大小排序</h3><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(n³) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</p><h3 id="空间复杂度-O-1"><a href="#空间复杂度-O-1" class="headerlink" title="空间复杂度 O(1)"></a><strong>空间复杂度 O(1)</strong></h3><p>如果算法执行所需要的临时空间不随着某个变量n的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> j = <span class="hljs-number">2</span>;<br>++i;<br>j++;<br><span class="hljs-type">int</span> m = i + j;<br></code></pre></td></tr></table></figure><p>代码中的 i、j、m 所分配的空间都不随着处理数据量变化，因此它的空间复杂度 S(n) &#x3D; O(1)</p><h3 id="空间复杂度-O-n"><a href="#空间复杂度-O-n" class="headerlink" title="空间复杂度 O(n)"></a><strong>空间复杂度 O(n)</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>[] m = new <span class="hljs-type">int</span>[n]<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>&#123;<br>   j = i;<br>   j++;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码中，第一行new了一个数组出来，这个数据占用的大小为n，这段代码的2-6行，虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 S(n) &#x3D; O(n)</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29365957/1673507914378-83aa4280-2e01-4293-beae-2df5c3ba41b8.png#averageHue=%23fafafa&clientId=uaa0f43b3-71fa-4&from=paste&id=u9b27f1ca&originHeight=375&originWidth=420&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u8c81493c-bf14-40ca-a391-cbbba846881&title="></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29365957/1673509016167-e5114432-09a3-4200-9254-c52da1f7aa3c.png#averageHue=%23dfdfb0&clientId=u62307dcf-0cfd-4&from=paste&height=54&id=ud00b05c2&name=image.png&originHeight=54&originWidth=691&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28342&status=done&style=none&taskId=u82d2cb6a-1b40-4455-867d-d6870f101c8&title=&width=691" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/29365957/1673509027719-e98dd16c-da84-4252-9ad4-4d42da74bb74.png#averageHue=%23f6f5f6&clientId=u62307dcf-0cfd-4&from=paste&height=377&id=u0be9a6d2&name=image.png&originHeight=377&originWidth=630&originalType=binary&ratio=1&rotation=0&showTitle=false&size=108557&status=done&style=none&taskId=ufffca4b6-47fb-4ecd-aeb8-937e3228e37&title=&width=630" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构概述&quot;&gt;&lt;a href=&quot;#数据结构概述&quot; class=&quot;headerlink&quot; title=&quot;数据结构概述&quot;&gt;&lt;/a&gt;数据结构概述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;数据结构是指相互之间存在一种或多种特定关系数据元素的集合&lt;/strong&gt;&lt;/p&gt;
&lt;h2 </summary>
      
    
    
    
    <category term="数据结构" scheme="http://example.com/salty.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法" scheme="http://example.com/salty.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>兼职信息aes rsa加密及websocket简易聊天实现</title>
    <link href="http://example.com/salty.github.io/2022/11/25/%E5%85%BC%E8%81%8C%E4%BF%A1%E6%81%AFaes%20rsa%E5%8A%A0%E5%AF%86%E5%8F%8Awebsocket%E7%AE%80%E6%98%93%E8%81%8A%E5%A4%A9%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/salty.github.io/2022/11/25/%E5%85%BC%E8%81%8C%E4%BF%A1%E6%81%AFaes%20rsa%E5%8A%A0%E5%AF%86%E5%8F%8Awebsocket%E7%AE%80%E6%98%93%E8%81%8A%E5%A4%A9%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-11-24T16:00:00.000Z</published>
    <updated>2023-03-24T06:51:24.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AES加密解密"><a href="#AES加密解密" class="headerlink" title="AES加密解密"></a>AES加密解密</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1667463614204-863fd438-7fc3-4eff-b130-8a1673212002.png#clientId=u734cbe78-c3bb-4&from=paste&height=473&id=u9c42a5af&name=image.png&originHeight=473&originWidth=985&originalType=binary&ratio=1&rotation=0&showTitle=false&size=107753&status=done&style=none&taskId=u350cec6f-4f27-4e00-9e62-9063d636e76&title=&width=985" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CryptoJS</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto-js&#x27;</span>)<br><span class="hljs-comment">// const keyStr = &#x27;encode@3#!8^k.j$&#x27;</span><br><span class="hljs-comment">// const ivStr = &#x27;vector@3#!8^k.j$&#x27;</span><br><span class="hljs-comment">// const txt = &#x27;123&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">data, keyS, ivS</span>) &#123;<br>  <span class="hljs-comment">// let key = keyS || keyStr</span><br>  <span class="hljs-comment">// let iv = ivS || ivStr</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data,<span class="hljs-string">&quot;data&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(keyS,<span class="hljs-string">&quot;keyS&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ivS,<span class="hljs-string">&quot;ivS&quot;</span>);<br> <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(keyS)<br> <span class="hljs-keyword">var</span> iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(ivS)<br>  <span class="hljs-keyword">const</span> src = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(data)<br>  <span class="hljs-keyword">const</span> cipher = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">encrypt</span>(src, key, &#123;<br>    <span class="hljs-attr">iv</span>: iv, <span class="hljs-comment">// 初始向量</span><br>    <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">CBC</span>, <span class="hljs-comment">// 加密模式</span><br>    <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span>, <span class="hljs-comment">// 填充方式</span><br>  &#125;)<br>  <span class="hljs-keyword">const</span> encrypted = cipher.<span class="hljs-title function_">toString</span>()<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(encrypted,<span class="hljs-string">&#x27;encrypted&#x27;</span>);<br>  <span class="hljs-keyword">return</span> encrypted<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">data, keyS, ivS</span>) &#123;<br>  <span class="hljs-comment">// let key = keyS || keyStr</span><br>  <span class="hljs-comment">// let iv = ivS || ivStr</span><br> <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(keyS)<br> <span class="hljs-keyword">var</span> iv = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>.<span class="hljs-title function_">parse</span>(ivS)<br>  <span class="hljs-keyword">const</span> cipher = <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">AES</span>.<span class="hljs-title function_">decrypt</span>(data, key, &#123;<br>    <span class="hljs-attr">iv</span>: iv,<br>    <span class="hljs-attr">mode</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">mode</span>.<span class="hljs-property">CBC</span>,<br>    <span class="hljs-attr">padding</span>: <span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">pad</span>.<span class="hljs-property">Pkcs7</span>,<br>  &#125;)<br>  <span class="hljs-keyword">const</span> decrypted = cipher.<span class="hljs-title function_">toString</span>(<span class="hljs-title class_">CryptoJS</span>.<span class="hljs-property">enc</span>.<span class="hljs-property">Utf8</span>) <span class="hljs-comment">// 返回的是加密之前的原始数据-&gt;字符串类型</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cipher,<span class="hljs-string">&quot;000&quot;</span>);<br>  <span class="hljs-keyword">return</span> decrypted<br>&#125;<br><br></code></pre></td></tr></table></figure><p>加密:encrypt(数据,密钥,偏移量)<br>解密:decrypt(数据,密钥,偏移量)</p><h3 id="rsa加密解密"><a href="#rsa加密解密" class="headerlink" title="rsa加密解密"></a>rsa加密解密</h3><p>1.npm i wxmp-rsa -S<br>2.import WxmpRsa from ‘wxmp-rsa’<br>3.实例化rsa<br>const rsa &#x3D; new WxmpRsa()<br>4.定义公钥<br>const publicKey &#x3D; <code>  -----BEGIN PUBLIC KEY-----   MIGeMA0GCSqGSIb3DQEBAQUAA4GMADCBiAKBgFnWSUwsmGawhMJ30z6y5li2jcf1   m7rPMZcwZOS3To8bk3OBaMGhVEc1F8GtJBbc1rn/HCLNL9zrCy21EefJON8tRFcY   HnpseZSzh+349lIhS+MFw9x4JUddwSPDyxwha929cKzMuVoftu3CJ+kqDBVvxLk7   iDBzUMqW3Kgehk2TAgMBAAE=   -----END PUBLIC KEY-----</code><br> 5.设置公钥<br>rsa.setPublicKey(publicKey)<br>6.加密<br>const cryptStr &#x3D; rsa.encryptLong(str)<br>console.log(‘加密后的结果：’, cryptStr)<br>7.&#x2F;&#x2F; 定义私钥<br>const privateKey &#x3D; <code>-----BEGIN RSA PRIVATE KEY----- MIICWgIBAAKBgFnWSUwsmGawhMJ30z6y5li2jcf1m7rPMZcwZOS3To8bk3OBaMGh VEc1F8GtJBbc1rn/HCLNL9zrCy21EefJON8tRFcYHnpseZSzh+349lIhS+MFw9x4 JUddwSPDyxwha929cKzMuVoftu3CJ+kqDBVvxLk7iDBzUMqW3Kgehk2TAgMBAAEC gYBRChPeyk/EOrHX912xLpLKLguh+LY9g1B50ScChzUvtTGDPZaxLQYoogVHKhfn I9nzuOS5pBzsDX9tAO0hCQzqfHgqRjn+vEgm1Ui+f0E3BVRnhobcJKZpZqlvCBR5 Gu2+zlrY4SeGq3AuQSr/A5FiB5k0RgsvNycDTjqyg7TXGQJBAJoZ8Yr0zakxT1I8 lVqsFbeNPtt8FNG2UgIlIs9RL7aXhw+Y3sWtk/kbaOXafSofu0NcQYx4Km3M3kiP lcNfTJ8CQQCVPcaRpu+mprRgHS6s76Z668NaFsjX04CUUa0kCrey+Nf/SJJ3BkRH M7GllZWuI/RSXs/F5N38p5bfkn7QZqaNAkBy3dHJZW8DpgjdYOFnhAxwFK39BwGx zHhWtv26kWbCcTKwsp+jtB4vunm3k+RmiN6aeGM35L6jt+kdJ0JYLmo7AkBJpRZb wZj5D8Jqu3vQ8uGgPr9DsYKinkgQ6M0bv/4uXwWXf+Rmv7zpteSv5UTbjfp+uzKk YO/6QWj+InhZto3xAkAOA0i702dLHm5elLWvht7UEYIDEW1+rYGdbthmJBvT9sZh VKL954Y9hDzBWepjYsBiJnmIkgeladPnU5025/G/ -----END RSA PRIVATE KEY-----</code><br>8. 设置私钥<br>rsa.setPrivateKey(privateKey)<br>9. 解密<br>const originalStr &#x3D; rsa.decryptLong(cryptStr)<br>console.log(‘解密后的原始数据：’, originalStr)</p><h3 id="WebSocket-是什么？"><a href="#WebSocket-是什么？" class="headerlink" title="WebSocket 是什么？"></a>WebSocket 是什么？</h3><p><a href="http://websocket.org/">WebSocket</a> 是一种网络通信协议。<a href="https://tools.ietf.org/html/rfc6455">RFC6455</a> 定义了它的通信标准。<br>WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p><h3 id="为什么需要-WebSocket-？"><a href="#为什么需要-WebSocket-？" class="headerlink" title="为什么需要 WebSocket ？"></a>为什么需要 WebSocket ？</h3><p>了解计算机网络协议的人，应该都知道：HTTP 协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求&#x2F;响应模型。通信请求只能由客户端发起，服务端对请求做出应答处理。<br>这种通信模型有一个弊端：HTTP 协议无法实现服务器主动向客户端发起消息。<br>这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。大多数 Web 应用程序将通过频繁的异步 JavaScript 和 XML（AJAX）请求实现长轮询。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。</p><h3 id="客户端-API"><a href="#客户端-API" class="headerlink" title="客户端 API"></a>客户端 API</h3><p>以下 API 用于创建 WebSocket 对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">var Socket = new WebSocket(url, [protocol] );<br></code></pre></td></tr></table></figure><h3 id="WebSocket-的属性"><a href="#WebSocket-的属性" class="headerlink" title="WebSocket 的属性"></a>WebSocket 的属性</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1667460339404-c3dd71a2-c2db-4d62-b5f0-0d26d76ac994.png#clientId=u734cbe78-c3bb-4&from=paste&height=395&id=u1750581a&name=image.png&originHeight=395&originWidth=1421&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99705&status=done&style=none&taskId=u741ed1b8-42e7-4d6d-b714-18e4c3a9269&title=&width=1421" alt="image.png"></p><h3 id="WebSocket-的事件"><a href="#WebSocket-的事件" class="headerlink" title="WebSocket 的事件"></a>WebSocket 的事件</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1667460379331-f48ff246-e082-469a-b50a-a33ead3b9fff.png#clientId=u734cbe78-c3bb-4&from=paste&height=384&id=u6a0a53fe&name=image.png&originHeight=384&originWidth=1431&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60285&status=done&style=none&taskId=uf969632d-02d8-434c-ab31-b0c4cd30db7&title=&width=1431" alt="image.png"></p><h3 id="WebSocket-的方法"><a href="#WebSocket-的方法" class="headerlink" title="WebSocket 的方法"></a>WebSocket 的方法</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1667460423633-62329e4d-d274-4ce1-80f0-f31b98f27c17.png#clientId=u734cbe78-c3bb-4&from=paste&height=236&id=u3dbde3e6&name=image.png&originHeight=236&originWidth=1418&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25435&status=done&style=none&taskId=u55d6e3df-856e-49f6-819f-cdfe805e1e0&title=&width=1418" alt="image.png"></p><h3 id="WebSocket-连接demo"><a href="#WebSocket-连接demo" class="headerlink" title="WebSocket 连接demo"></a>WebSocket 连接demo</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 初始化一个 WebSocket 对象</span><br><span class="hljs-keyword">var</span> ws = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:9998/echo&#x27;</span>);<br><br><span class="hljs-comment">// 建立 web socket 连接成功触发事件</span><br>ws.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 使用 send() 方法发送数据</span><br>  ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;发送数据&#x27;</span>);<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;数据发送中...&#x27;</span>);<br>&#125;;<br><br><span class="hljs-comment">// 接收服务端数据时触发事件</span><br>ws.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">evt</span>) &#123;<br>  <span class="hljs-keyword">var</span> received_msg = evt.<span class="hljs-property">data</span>;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;数据已接收...&#x27;</span>);<br>&#125;;<br><br><span class="hljs-comment">// 断开 web socket 连接成功触发事件</span><br>ws.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;连接已关闭...&#x27;</span>);<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="兼职聊天页面WebSocket-连接步骤"><a href="#兼职聊天页面WebSocket-连接步骤" class="headerlink" title="兼职聊天页面WebSocket 连接步骤"></a>兼职聊天页面WebSocket 连接步骤</h3><p>1.全局定义websocket对象<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366328/1667461811933-5eff9301-1951-4204-85d7-aab306fa67d6.png#clientId=u734cbe78-c3bb-4&from=paste&height=28&id=ub21b3cbf&name=image.png&originHeight=28&originWidth=413&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1724&status=done&style=none&taskId=u2996a451-819b-4d95-a3a2-97262402784&title=&width=413" alt="image.png"><br>2.建立webscoket连接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">socketTaskRoom = wx.<span class="hljs-title function_">connectSocket</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">`wss://mall.wuhanzhuangxiu01.cn/job_ws/chat/<span class="hljs-subst">$&#123;that.$store.state.openid&#125;</span>__<span class="hljs-subst">$&#123;that.jobDetailObj.openid&#125;</span>/?_=<span class="hljs-subst">$&#123;time&#125;</span>&amp;dds=<span class="hljs-subst">$&#123;postData&#125;</span>&amp;rk=<span class="hljs-subst">$&#123;that.key&#125;</span>`</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>连接url动态生成，当前用户openid___被连接用户openid + 时间戳 +dds + rk<br>dds &#x3D; postdata; rk &#x3D; key<br>key &#x3D; rsa加密（时间戳+三位随机字符串）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">urlData = <span class="hljs-string">`user_id=<span class="hljs-subst">$&#123;that.$store.state.openid&#125;</span>&amp;username=<span class="hljs-subst">$&#123;that.$store.state.user_name&#125;</span>&amp;chat_with_id=<span class="hljs-subst">$&#123;that.jobDetailObj.openid&#125;</span>&amp;chat_with_name=<span class="hljs-subst">$&#123;that.jobDetailObj.username&#125;</span>&amp;chat_job_id=<span class="hljs-subst">$&#123;that.jobDetailObj.id&#125;</span>&amp;chat_job_title=<span class="hljs-subst">$&#123;that.jobDetailObj.title&#125;</span>&amp;appid=<span class="hljs-subst">$&#123;that.$store.state.appid&#125;</span>&amp;avatar=<span class="hljs-subst">$&#123;that.$store.state.user_img&#125;</span>&amp;chat_with_avatar=<span class="hljs-subst">$&#123;that.jobDetailObj.headimg&#125;</span>`</span><br>postData = <span class="hljs-title function_">encrypt</span>(urlData,time+randomStr,<span class="hljs-variable language_">this</span>.<span class="hljs-property">iv</span>)<br></code></pre></td></tr></table></figure><p>iv &#x3D; MD5加密（时间戳）.substr(8,16)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">socketTaskRoom.<span class="hljs-title function_">onOpen</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocket连接已打开！&#x27;</span>);<br>  socketOpen = <span class="hljs-literal">true</span><br>&#125;);<br>socketTaskRoom.<span class="hljs-title function_">onError</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocket连接打开失败，请检查！&#x27;</span>);<br>  socketOpen = <span class="hljs-literal">false</span><br>&#125;);<br>socketTaskRoom.<span class="hljs-title function_">onMessage</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;收到服务器内容：&#x27;</span> + res.<span class="hljs-property">data</span>);<br>that.<span class="hljs-title function_">getSocketMsg</span>(res.<span class="hljs-property">data</span>); <span class="hljs-comment">// 监听到有新服务器消息</span><br>that.<span class="hljs-property">talkList</span>.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(res.<span class="hljs-property">data</span>))<br><br>&#125;)<br>socketTaskRoom.<span class="hljs-title function_">onClose</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocket 已关闭！&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>所有数据处理完成后，连接成功，通过onopen方法监听到连接成功消息，<br>通过onMessage收到服务端推送的消息，拿到消息后json parse push进聊天列表（此时消息都是新的聊天内容）<br>本地通过send方法发送消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">send_user_id</span>: that.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">openid</span>, <span class="hljs-attr">send_username</span>: that.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">user_name</span>, <span class="hljs-attr">send_time</span>: <span class="hljs-string">&quot;2022-10-13 11:40:00&quot;</span>, <span class="hljs-attr">send_message</span>: <span class="hljs-string">&quot;我是user1&quot;</span>, <span class="hljs-attr">chat_with_id</span>: that.<span class="hljs-property">oid</span>, <span class="hljs-attr">chat_with_name</span>: that.<span class="hljs-property">jobDetailObj</span>.<span class="hljs-property">username</span>,<span class="hljs-attr">chat_job_id</span>:that.<span class="hljs-property">jobDetailObj</span>.<span class="hljs-property">id</span>,<span class="hljs-attr">chat_job_title</span>:that.<span class="hljs-property">jobDetailObj</span>.<span class="hljs-property">title</span>,<span class="hljs-attr">appid</span>:that.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">appid</span>,<span class="hljs-attr">avatar</span>:that.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">user_img</span>,<span class="hljs-attr">chat_with_avatar</span>:that.<span class="hljs-property">jobDetailObj</span>.<span class="hljs-property">headimg</span>&#125;<br>socketTaskRoom.<span class="hljs-title function_">send</span>(&#123;<br><span class="hljs-attr">data</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj),<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>消息发送成功后，onMessage可以监听到服务端返回的消息列表，即你此时发送成功的消息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送信息</span><br><span class="hljs-title function_">send</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">content</span>)&#123;<br>uni.<span class="hljs-title function_">showToast</span>(&#123;<br><span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;请输入有效的内容&#x27;</span>,<br><span class="hljs-attr">icon</span>:<span class="hljs-string">&#x27;none&#x27;</span><br>&#125;)<br><span class="hljs-keyword">return</span>;<br>&#125;<br>uni.<span class="hljs-title function_">showLoading</span>(&#123;<br><span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;正在发送&#x27;</span><br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>uni.<span class="hljs-title function_">hideLoading</span>();<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">sendMessage</span>()<br><span class="hljs-variable language_">this</span>.$nextTick(<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-comment">// 清空内容框中的内容</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">content</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>uni.<span class="hljs-title function_">pageScrollTo</span>(&#123;<br>    <span class="hljs-attr">scrollTop</span>: <span class="hljs-number">999999</span>,<span class="hljs-comment">// 设置一个超大值，以保证滚动条滚动到底部</span><br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">0</span><br>&#125;);<br>&#125;)<br>&#125;,<span class="hljs-number">500</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="聊天历史记录获取"><a href="#聊天历史记录获取" class="headerlink" title="聊天历史记录获取"></a>聊天历史记录获取</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getHistory</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(that.<span class="hljs-property">jobDetailObj</span>,<span class="hljs-string">&quot;1111111&quot;</span>);<br>uni.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">`https://mall.wuhanzhuangxiu01.cn/job_chat/ch`</span>,<br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-string">&quot;user_id&quot;</span>:that.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">openid</span>,<br><span class="hljs-string">&quot;chat_with_id&quot;</span>:that.<span class="hljs-property">type</span>==<span class="hljs-number">2</span>?that.<span class="hljs-property">oid</span>:that.<span class="hljs-property">jobDetailObj</span>.<span class="hljs-property">openid</span>,<br><span class="hljs-string">&quot;appid&quot;</span>:that.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">appid</span><br>&#125;,<br><span class="hljs-attr">method</span>:<span class="hljs-string">&quot;POST&quot;</span>,<br><span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> jsonData = <span class="hljs-title function_">decrypt</span>(res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span>,<span class="hljs-string">&quot;2031618372682131&quot;</span>,<span class="hljs-string">&quot;9329859705602774&quot;</span>)<br><span class="hljs-comment">// console.log(res.data.data);</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsonData,<span class="hljs-string">&quot;解密后&quot;</span>);<br>that.<span class="hljs-title function_">hideLoadTips</span>(<span class="hljs-literal">true</span>);<br>that.<span class="hljs-property">talkList</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonData)<br><br>&#125;<br>&#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="聊天列表界面websocket"><a href="#聊天列表界面websocket" class="headerlink" title="聊天列表界面websocket"></a>聊天列表界面websocket</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getChatList</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span><br>socketTaskList = wx.<span class="hljs-title function_">connectSocket</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;wss://mall.wuhanzhuangxiu01.cn/job_ws/chatList/&#x27;</span><br>&#125;);<br>socketTaskList.<span class="hljs-title function_">onOpen</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocket连接已打开！&#x27;</span>);<br>  that.<span class="hljs-title function_">btn</span>()<br>  socketOpen = <span class="hljs-literal">true</span><br>&#125;);<br>socketTaskList.<span class="hljs-title function_">onError</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocket连接打开失败，请检查！&#x27;</span>);<br>  socketOpen = <span class="hljs-literal">false</span><br>&#125;);<br>socketTaskList.<span class="hljs-title function_">onMessage</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;收到服务器内容：&#x27;</span> + res.<span class="hljs-property">data</span>);<br><span class="hljs-keyword">let</span> data = <span class="hljs-title function_">decrypt</span>(res.<span class="hljs-property">data</span>,<span class="hljs-string">&#x27;1189789282863375&#x27;</span>,<span class="hljs-string">&#x27;5671714989170848&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data));<br>that.<span class="hljs-property">list</span> = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(data)<br><br>&#125;)<br>socketTaskList.<span class="hljs-title function_">onClose</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;WebSocket 已关闭！&#x27;</span>);<br>&#125;);<br>&#125;,<br></code></pre></td></tr></table></figure><p>页面跳转时断开连接<br>socketTaskList.close()</p><h3 id="websocket重连机制"><a href="#websocket重连机制" class="headerlink" title="websocket重连机制"></a>websocket重连机制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">checkOpenSocket</span>(<span class="hljs-params"></span>) &#123;<br>socketTaskRoom.<span class="hljs-title function_">send</span>(&#123;<br><span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;ping&#x27;</span>,<br><span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br><span class="hljs-keyword">return</span>;<br>&#125;,<br><span class="hljs-attr">fail</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-comment">// 未连接打开websocket连接</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">lianJie</span>()<br>&#125;<br>&#125;);<br>&#125;,<br><span class="hljs-comment">// 检测心跳reset  在监听到服务端消息时调用</span><br><span class="hljs-title function_">reset</span>(<span class="hljs-params"></span>) &#123;    <br><span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timeoutObj</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">start</span>(); <span class="hljs-comment">// 启动心跳</span><br>&#125;,<br><span class="hljs-comment">// 启动心跳 start</span><br><span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">timeoutObj</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>socketTaskRoom.<span class="hljs-title function_">send</span>(&#123;<br><span class="hljs-attr">data</span>: <span class="hljs-string">&#x27;ping&#x27;</span>,<br><span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br><br>&#125;,<br><span class="hljs-attr">fail</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;连接失败重新连接....&#x27;</span>);<br><span class="hljs-comment">// that.addKey();</span><br>&#125;<br>&#125;);<br>&#125;, <span class="hljs-variable language_">this</span>.<span class="hljs-property">timeout</span>);<br>&#125;,<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;AES加密解密&quot;&gt;&lt;a href=&quot;#AES加密解密&quot; class=&quot;headerlink&quot; title=&quot;AES加密解密&quot;&gt;&lt;/a&gt;AES加密解密&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2022/png/2</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="js" scheme="http://example.com/salty.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>微信支付详解</title>
    <link href="http://example.com/salty.github.io/2022/09/25/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/salty.github.io/2022/09/25/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-09-24T16:00:00.000Z</published>
    <updated>2023-03-24T06:54:36.042Z</updated>
    
    <content type="html"><![CDATA[<p>一．概论<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1660877398383-268be2ff-b992-4d6d-aca3-dd6fcd60c01e.png#id=cWmYA&originHeight=296&originWidth=960&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ol><li>Native支付：</li></ol><p>商户系统按微信支付协议生成支付二维码，用户再用微信“扫一扫”完成支付的模式<br>返回说明：微信接口返回 url 链接（wxpay:&#x2F;&#x2F;）   前端根据url生成对应的二维码,用户扫码支付</p><ol><li>付款码支付：</li></ol><p>用户出示微信钱包中的条码、二维码，商家通过扫描用户条码即可完成收款<br>返回说明：（客户出示微信的条码，商家通过扫码机扫码完成支付）<br>备注：条码扫码机原理：扫码机在扫码时会识别条码里包含的数字+回车键事件（举例：input输入框监听回车键按键事件）</p><ol><li>H5支付：</li></ol><p>商户在微信客户端外的移动端网页展示商品或服务，用户在前述页面确认使用微信支付时，商户发起本服务呼起微信客户端进行支付。<br>返回支付H5 url链接，用户跳转到url界面去唤醒支付</p><ol><li>APP支付：</li></ol><p>商户通过在移动端应用APP中集成开放SDK调起微信支付模块来完成支付。<br>在APP内直接通过activity唤醒微信模块内支付模块<br>(每一个APP软件的每一个界面都是一个activity，另一个APP可以通过)</p><ol><li>小程序支付:</li></ol><p>在微信内打开小程序时，可以调用微信支付完成下单购买的流程<br>微信小程序内调起微信支付接口</p><p>二．详情<br>以下已小程序支付为例说明<br>①V2版本<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1660877398935-a670a51b-8a63-47d5-8645-95598a43a78e.png#id=Fn2I1&originHeight=267&originWidth=297&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>V2版本介绍：（本公司项目目前皆使用的是V2版本）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1660877399538-0e233268-c411-4413-964e-665cc1a6152a.png#id=soTAj&originHeight=175&originWidth=223&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><em>V2版本默认是不需要配置证书的 ，但是配置了证书后必须使用证书方式进行调用<br>接口说明：<br>第一步：（前端小程序功能）小程序调起支付<br>wx.requestPayment<br>(<br>    {<br>        &#x2F;&#x2F;时间戳<br>“timeStamp”: “1414561699”,<br>&#x2F;&#x2F;随机字符串，不长于32位。<br>        “nonceStr”: “5K8264ILTKCH16CQ2502SI8ZNMTM67VS”,<br>         &#x2F;&#x2F;小程序下单接口返回的prepay_id参数值，提交格式如：prepay_id&#x3D;</em>** <br>    &#x2F;&#x2F;该参数由微信支付统一下单接口返回（如附注一）<br>“package”: “prepay_id&#x3D;wx201410272009395522657a690389285100”,<br>&#x2F;&#x2F;签名类型，默认为HMAC256和MD5。<br>        “signType”: “MD5”,<br>         &#x2F;&#x2F;该sign通过加密算法生成<br>        “paySign”: “oR9d8PuhnIc+YZ8cBHFCwfgpaK9gd7vaRvkYD7rthRAZ/X+QBhcCYL21N7cHCTUxbQ+EAt6Uy+lwSN22f5YZvI45MLko8Pfso0jm46v5hqcVwrk6uddkGuT+Cdvu4WBqDzaDjnNa5UK3GfE1Wfl2gHxIIY5lLdUgWFts17D4WuolLLkiFZV+JSHMvH7eaLdT9N5GBovBwu5yYKUR7skR8Fu+LozcSqQixnlEZUfyE55feLOQTUYzLmR9pNtPbPsu6WVhbNHMS3Ss2+AehHvz+n64GDmXxbX++IOBvm2olHu3PsOUGRwhudhVf7UcGcunXt8cqNjKNqZLhLw4jq/xDg&#x3D;&#x3D;”,<br>        “success”:function(res){},<br>        “fail”:function(res){},<br>        “complete”:function(res){}<br>    }<br>)<br>附注一：<br>统一下单接口获取prepay_id<br>统一下单接口url：<a href="https://api.mch.weixin.qq.com/pay/unifiedorder">https://api.mch.weixin.qq.com/pay/unifiedorder</a><br>参数说明：<br>‘appid’ &#x3D;&gt; $this-&gt;appid, &#x2F;&#x2F;小程序 ID<br>‘mch_id’ &#x3D;&gt; $this-&gt;mch_id, &#x2F;&#x2F;商户号<br>nonce_str’ &#x3D;&gt; $this-&gt;createNoncestr(), &#x2F;&#x2F;随机字符串<br>‘body’ &#x3D;&gt; $this-&gt;body,<br>‘out_trade_no’ &#x3D;&gt; ‘2018013106125348’, &#x2F;&#x2F;商户订单号<br>‘total_fee’ &#x3D;&gt;100, &#x2F;&#x2F;总金额 单位 分<br>‘spbill_create_ip’ &#x3D;&gt; ‘192.168.0.161’, &#x2F;&#x2F;终端 IP<br>‘notify_url’ &#x3D;&gt;‘’, &#x2F;&#x2F;通知地址  确保外网能正常访问<br>‘openid’ &#x3D;&gt; $this-&gt;openid, &#x2F;&#x2F;用户 id<br>‘trade_type’ &#x3D;&gt; ‘JSAPI’&#x2F;&#x2F;交易类型<br>‘sign’&#x3D;&gt;根据以上参数生成<br>（如果配置了证书：<br>ssl_key_addr：‘’，<br>ssl_cert_addr：‘’ 记得是证书的绝对地址而不是证书里面的内容 v3版本使用的是证书里的内容）<br>备注：①sign的生成算法（注意这个sign并不是小程序所需要的paysign而是统一下单接口需要的sign）<br>将以上参数去掉sign参数后  进行按字典序排序后去掉空格  在转为appid&#x3D;123&amp;mch_id&#x3D;123123&amp;…&amp;trade_type&#x3D;JSAPI形式的字符串str；再在字符串str后拼接key 得到新的字符串str（appid&#x3D;123&amp;mch_id&#x3D;123123&amp;…&amp;trade_type&#x3D;JSAPI&amp;key&#x3D;12312313）<br>最后将得到的str进行md5加密 得到所谓的sign<br>②注意v2版本 提交给微信的并非是我们常见的json形式的数据而是xml格式<br>（xml教程：<a href="https://www.w3school.com.cn/xml/index.asp">https://www.w3school.com.cn/xml/index.asp</a>）<br>以上接口成功后会拿到所需要的prepay_id<br>有了prepay_id后  我们就还剩一个参数没有 那便是小程序调起支付所需要的paysign<br>此时需要在根据上面sign的生成算法 根据值生成一个小程序使用的paysign<br>学名把它叫做 二次验签 参数如下<br> ‘appId’ &#x3D;&gt; $this-&gt;appid, &#x2F;&#x2F;小程序 ID<br> ‘timeStamp’ &#x3D;&gt; ‘’ . time() . ‘’, &#x2F;&#x2F;时间戳<br> ‘nonceStr’ &#x3D;&gt; $this-&gt;createNoncestr(), &#x2F;&#x2F;随机串<br> ‘package’ &#x3D;&gt; ‘prepay_id&#x3D;’, &#x2F;&#x2F;数据包（上面拿到的prepay_id）<br> ‘signType’ &#x3D;&gt; ‘MD5’&#x2F;&#x2F;签名方式</p><p>到此：小程序所需要的所有参数已经全部获取  直接调用即可拉起微信支付<br>②V3<br>V3接口是最近出来的新的方式，v3的sign生成算法和v2的逻辑上有着本质的区别<br>只要一个一样的  那就是都需要二次验签，具体区别如下图：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/29366599/1660877400485-26329e4b-1d33-4b5e-8a3b-63236bbe62c3.png#id=MvMyK&originHeight=242&originWidth=713&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>可以看到  ①v3 已经放弃了你们常见的MD5  而改用最新的RSA+SHA256(俗称RSA2加密方式)②v2的所有返回结果都是明文的xml  v3改成了加密后的json但是需要解密后才能拿到真正的返回值（解密算法AES-256-GCM）<br>具体流程如下：<br>第一步：（前端小程序功能）小程序调起支付<br>wx.requestPayment<br>(<br>    {<br>        &#x2F;&#x2F;时间戳<br>“timeStamp”: “1414561699”,<br>&#x2F;&#x2F;随机字符串，不长于32位。<br>        “nonceStr”: “5K8264ILTKCH16CQ2502SI8ZNMTM67VS”,<br>         &#x2F;&#x2F;小程序下单接口返回的prepay_id参数值，提交格式如：prepay_id&#x3D;*** <br>    &#x2F;&#x2F;该参数由微信支付统一下单接口<br>“package”: “prepay_id&#x3D;wx201410272009395522657a690389285100”,<br>&#x2F;&#x2F;签名类型<br>        “signType”: “RSA”,(只能RSA)<br>         &#x2F;&#x2F;该sign通过加密算法生成<br>        “paySign”: “oR9d8PuhnIc+YZ8cBHFCwfgpaK9gd7vaRvkYD7rthRAZ/X+QBhcCYL21N7cHCTUxbQ+EAt6Uy+lwSN22f5YZvI45MLko8Pfso0jm46v5hqcVwrk6uddkGuT+Cdvu4WBqDzaDjnNa5UK3GfE1Wfl2gHxIIY5lLdUgWFts17D4WuolLLkiFZV+JSHMvH7eaLdT9N5GBovBwu5yYKUR7skR8Fu+LozcSqQixnlEZUfyE55feLOQTUYzLmR9pNtPbPsu6WVhbNHMS3Ss2+AehHvz+n64GDmXxbX++IOBvm2olHu3PsOUGRwhudhVf7UcGcunXt8cqNjKNqZLhLw4jq/xDg&#x3D;&#x3D;”,<br>        “success”:function(res){},<br>        “fail”:function(res){},<br>        “complete”:function(res){}<br>    }<br>)</p><p>这个功能  其实和v2的参数大相径庭  重点依旧是获取prepay_id  和  paysign<br>也就是重点是从后面开始 会有截然不同的体现<br>jsapi下单接口url：<a href="https://api.mch.weixin.qq.com/v3/pay/transactions/jsapi">https://api.mch.weixin.qq.com/v3/pay/transactions/jsapi</a><br>参数：<br>‘appid’ &#x3D;&gt; $this-&gt;appid, &#x2F;&#x2F;小程序 ID<br>‘mch_id’ &#x3D;&gt; $this-&gt;mch_id, &#x2F;&#x2F;商户号<br>‘description’ &#x3D;&gt; 商品描述,<br>‘out_trade_no’ &#x3D;&gt; ‘2018013106125348’, &#x2F;&#x2F;商户订单号<br>‘notify_url’ &#x3D;&gt;‘’, &#x2F;&#x2F;通知地址  确保外网能正常访问<br>‘payer’：{‘openid’ &#x3D;&gt; $this-&gt;openid}, &#x2F;&#x2F;用户 id<br>‘amount：{‘total’ &#x3D;&gt; 100}, &#x2F;&#x2F;金额<br>例如：<br>{<br>    “mchid”: “1900006XXX”,<br>    “out_trade_no”: “1217752501201407033233368318”,<br>    “appid”: “wxdace645e0bc2cXXX”,<br>    “description”: “Image形象店-深圳腾大-QQ公仔”,<br>    “notify_url”: “<a href="https://weixin.qq.com/">https://weixin.qq.com/</a>“,<br>    “amount”: {<br>        “total”: 1,<br>        “currency”: “CNY”<br>    },<br>    “payer”: {<br>        “openid”: “o4GgauInH_RCEdvrrNGrntXDuXXX”<br>    }<br>}<br>这就是所有要传入的参数 细心的你们会发现 参数里并没有发现sign<br>那么v3的接口到底如何调用  我们需要的sign又是如何生成的呢？？？<br>具体的如下：</p><ol><li>第一步：</li></ol><p>我们有了以上的参数后 就可以进行签名（第一次签名）<br>第一次签名 并不再是单纯的依靠我们的参数进行签名  ，而是已一种http协议格式的字符串进行签名：例如<br>HTTP请求方法\n URL\n 请求时间戳\n 请求随机串\n 请求报文主体\n<br>以上的  请求方法：get&#x2F;post<br>        url  网关<br>请求时间戳（自主生成）&#x2F;请求随机串（自主生成）&#x2F;报文主体：我们的参数<br>对这个字符串先进行sha256编码在对编码后的字符串进行rsa加密<br>得到的第一次签名的sign<br>备注：这个sign并不需要加入到参数中  ，而是在我们向微信提交请求时 放在请求头中<br>auth_info &#x3D; ‘WECHATPAY2-SHA256-RSA2048 {}’.format(sign)<br>headers[‘Authorization’] &#x3D; auth_info<br>如此我们便能得到prepay_id，那么就还是小程序所需要的paysign<br>那么小程序所需要的paysign  在v3的接口里是怎么生成的呢<br>如下：当我们拿到prepay_id以后<br>我们需要拼接一个这样格式的字符串：<br>‘{}\n{}\n{}\n{}\n’.format(self.mch_appid, ts, nonce, prepay_id)<br>举例： Appid\n时间戳\随机字符串\nprepay_id&#x3D;******<br>对上面所诉的字符串在进行签名得到小程序调起支付所需要的paysign<br>返给前端：至此v3版本支付功能结束<br>由于V3版本设计到了RSA和sha256等算法，这两种算法都封装于openssl里面<br>Sha256  把一个字符串进行sha256后会成为一个256bit的哈希值（跟md5一样不可逆）<br>比如：A7FCFC6B5269BDCCE571798D618EA219A68B96CB87A0E21080C2E758D23E4CE9<br>Rsa ①则是一种对称加密算法 之然而然  就会有加密的密钥 和 解密的密钥（rsa的密钥存放在证书里））②传统的rsa 最开始是1028位的 ，最新的暴力破解已经尝试到了986位，所以 微信使用的全是最新的rsa256（密钥长度为 2056位）（这一点跟支付宝一样，支付宝提供个人沙箱环境 只支持rsa256加密））</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一．概论&lt;br&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2022/png/29366599/1660877398383-268be2ff-b992-4d6d-aca3-dd6fcd60c01e.png#id=cWmYA&amp;originH</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="小程序" scheme="http://example.com/salty.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>uni-app 顶部滑动导航栏组件</title>
    <link href="http://example.com/salty.github.io/2022/09/11/uni-app%20%E9%A1%B6%E9%83%A8%E6%BB%91%E5%8A%A8%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%BB%84%E4%BB%B6/"/>
    <id>http://example.com/salty.github.io/2022/09/11/uni-app%20%E9%A1%B6%E9%83%A8%E6%BB%91%E5%8A%A8%E5%AF%BC%E8%88%AA%E6%A0%8F%E7%BB%84%E4%BB%B6/</id>
    <published>2022-09-10T16:00:00.000Z</published>
    <updated>2023-03-24T06:57:15.373Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;view class=&quot;uni-tab-bar&quot;&gt;<br>        &lt;scroll-view class=&quot;uni-swiper-tab&quot; scroll-x=&quot;true&quot;&gt;<br>            &lt;block v-for=&quot;(tab,index) in tabBars&quot; :style=&quot;scrollStyle&quot;&gt;<br>                &lt;view class=&quot;swiper-tab-list&quot; :class=&quot;&#123;&#x27;active&#x27; : tabIndex==index&#125;&quot; @tap=&quot;tabtap(index)&quot;<br>                    :style=&quot;scrollItemStyle&quot;&gt;<br>                    &#123;&#123;tab.name&#125;&#125; &#123;&#123;tab.num?tab.num:&quot;&quot;&#125;&#125;<br>                    &lt;view class=&quot;swiper-tab-line&quot;&gt;&lt;/view&gt;<br>                &lt;/view&gt;<br>            &lt;/block&gt;<br>        &lt;/scroll-view&gt;<br>    &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>    export default &#123;<br>        props: &#123;<br>            tabBars: Array,<br>            tabIndex: Number,<br>            scrollStyle: &#123;<br>                type: String,<br>                default: &quot;&quot;<br>            &#125;,<br>            scrollItemStyle: &#123;<br>                type: String,<br>                default: &quot;&quot;<br>            &#125;<br>        &#125;,<br>        methods: &#123;<br>            //点击切换导航<br>            tabtap(index) &#123;<br>                // this.tabIndex = index;<br>                this.$emit(&#x27;tabtap&#x27;, index)<br>            &#125;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;　<br><br>&lt;style&gt;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>    &lt;view class=&quot;content&quot;&gt;<br> &lt;swiperTabHead :tabBars=&quot;tabBars&quot; :tabIndex=&quot;tabIndex&quot; @tabtap=&quot;tabtap&quot;&gt;&lt;/swiperTabHead&gt;<br>&lt;swiper class=&quot;swiper-content&quot; :style=&quot;&#123;height:swiperheight+&#x27;rpx&#x27;&#125;&quot; :current=&quot;tabIndex&quot; @change=&quot;swiperChange&quot;&gt;<br>  &lt;swiper-item class=&quot;itemswiper&quot; :key=&quot;index2&quot; v-for=&quot;(newItem ,index2) in tabBars&quot;&gt;<br>  &lt;view class=&quot;viewat&quot;&gt;<br>&#123;&#123;newItem.id&#125;&#125; &#123;&#123;newItem.name&#125;&#125;<br>&lt;/view&gt;<br>&lt;/swiper-item&gt;<br>  &lt;/swiper&gt;<br>&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import swiperTabHead from &quot;../../components/scrollbar.vue&quot;<br>export default &#123;<br>components: &#123;<br>swiperTabHead<br>&#125;,<br>data() &#123;<br>return &#123;<br>swiperheight: 0,<br>tabIndex: 0, // 选中的<br>tabBars: [&#123;<br>name: &quot;关注&quot;,<br>id: &quot;guanzhu&quot;<br>&#125;,<br>&#123;<br>name: &quot;推荐&quot;,<br>id: &quot;tuijian&quot;<br>&#125;,<br>&#123;<br>name: &quot;体育&quot;,<br>id: &quot;tiyu&quot;<br>&#125;,<br>&#123;<br>name: &quot;热点咨询&quot;,<br>id: &quot;redian&quot;<br>&#125;,<br>&#123;<br>name: &quot;财经&quot;,<br>id: &quot;caijing&quot;<br>&#125;,<br>&#123;<br>name: &quot;娱乐&quot;,<br>id: &quot;yule&quot;<br>&#125;,<br>&#123;<br>name: &quot;社会&quot;,<br>id: &quot;yule&quot;<br>&#125;,<br>&#123;<br>name: &quot;自然&quot;,<br>id: &quot;yule&quot;<br>&#125;,<br>&#123;<br>name: &quot;币圈&quot;,<br>id: &quot;yule&quot;<br>&#125;,<br>&#123;<br>name: &quot;国家体育&quot;,<br>id: &quot;yule&quot;<br>&#125;,<br>]<br>&#125;<br>&#125;,<br>onLoad() &#123;<br>var _this = this<br>uni.getSystemInfo(&#123;<br>success(res) &#123;<br>console.log(&quot;屏幕高度 HH = &quot; + res.windowHeight)<br>console.log(&quot;屏幕高度 HH222 = &quot; + res.windowHeight * 2)<br>_this.swiperheight = res.windowHeight * 2 - 68<br>&#125;<br>&#125;)<br>&#125;,<br>methods: &#123;<br>//接受子组件传过来的值点击切换导航<br>tabtap(index) &#123;<br>var _this = this<br>_this.tabIndex = index;<br>&#125;,<br>// 滑动切换导航<br>swiperChange: function(e) &#123;<br>var _this = this<br>_this.tabIndex = e.detail.current<br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="小程序" scheme="http://example.com/salty.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>MD5js文件</title>
    <link href="http://example.com/salty.github.io/2022/09/05/MD5js%E6%96%87%E4%BB%B6/"/>
    <id>http://example.com/salty.github.io/2022/09/05/MD5js%E6%96%87%E4%BB%B6/</id>
    <published>2022-09-04T16:00:00.000Z</published>
    <updated>2023-03-24T06:58:20.714Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">! function(n) &#123;<br>&quot;use strict&quot;;<br><br>function t(n, t) &#123;<br>var r = (65535 &amp; n) + (65535 &amp; t);<br>return (n &gt;&gt; 16) + (t &gt;&gt; 16) + (r &gt;&gt; 16) &lt;&lt; 16 | 65535 &amp; r<br>&#125;<br><br>function r(n, t) &#123;<br>return n &lt;&lt; t | n &gt;&gt;&gt; 32 - t<br>&#125;<br><br>function e(n, e, o, u, c, f) &#123;<br>return t(r(t(t(e, n), t(u, f)), c), o)<br>&#125;<br><br>function o(n, t, r, o, u, c, f) &#123;<br>return e(t &amp; r | ~t &amp; o, n, t, u, c, f)<br>&#125;<br><br>function u(n, t, r, o, u, c, f) &#123;<br>return e(t &amp; o | r &amp; ~o, n, t, u, c, f)<br>&#125;<br><br>function c(n, t, r, o, u, c, f) &#123;<br>return e(t ^ r ^ o, n, t, u, c, f)<br>&#125;<br><br>function f(n, t, r, o, u, c, f) &#123;<br>return e(r ^ (t | ~o), n, t, u, c, f)<br>&#125;<br><br>function i(n, r) &#123;<br>n[r &gt;&gt; 5] |= 128 &lt;&lt; r % 32, n[14 + (r + 64 &gt;&gt;&gt; 9 &lt;&lt; 4)] = r;<br>var e, i, a, d, h, l = 1732584193,<br>g = -271733879,<br>v = -1732584194,<br>m = 271733878;<br>for (e = 0; e &lt; n.length; e += 16) i = l, a = g, d = v, h = m, g = f(g = f(g = f(g = f(g = c(g = c(g = c(g = c(<br>g = u(g = u(g = u(g = u(g = o(g = o(g = o(g = o(g, v = o(v, m = o(m, l = o(<br>l, g, v, m, n[e], 7, -680876936<br>), g, v, n[e + 1], 12, -<br>389564586), l, g, n[e + 2], 17,<br>606105819), m, l, n[e + 3], 22, -<br>1044525330), v = o(v, m = o(m, l = o(l, g,<br>v, m, n[e + 4], 7, -176418897), g,<br>v, n[e + 5], 12, 1200080426), l, g, n[<br>e + 6], 17, -1473231341), m, l, n[e + 7],<br>22, -45705983), v = o(v, m = o(m, l = o(l, g, v,<br>m, n[e + 8], 7, 1770035416), g, v, n[e +<br>9], 12, -1958414417), l, g, n[e + 10], 17, -<br>42063), m, l, n[e + 11], 22, -1990404162), v = o(v,<br>m = o(m, l = o(l, g, v, m, n[e + 12], 7,<br>1804603682), g, v, n[e + 13], 12, -40341101), l,<br>g, n[e + 14], 17, -1502002290), m, l, n[e + 15], 22,<br>1236535329), v = u(v, m = u(m, l = u(l, g, v, m, n[e +<br>1], 5, -165796510), g, v, n[e + 6], 9, -<br>1069501632), l, g, n[e + 11], 14, 643717713), m, l, n[<br>e], 20, -373897302), v = u(v, m = u(m, l = u(l, g, v, m, n[<br>e + 5], 5, -701558691), g, v, n[e + 10], 9,<br>38016083), l, g, n[e + 15], 14, -660478335), m, l, n[e + 4],<br>20, -405537848), v = u(v, m = u(m, l = u(l, g, v, m, n[e + 9],<br>5, 568446438), g, v, n[e + 14], 9, -1019803690), l, g, n[e +<br>3], 14, -187363961), m, l, n[e + 8], 20, 1163531501), v = u(v, m =<br>u(m, l = u(l, g, v, m, n[e + 13], 5, -1444681467), g, v, n[e + 2],<br>9, -51403784), l, g, n[e + 7], 14, 1735328473), m, l, n[e + 12],<br>20, -1926607734), v = c(v, m = c(m, l = c(l, g, v, m, n[e + 5], 4, -<br>378558), g, v, n[e + 8], 11, -2022574463), l, g, n[e + 11], 16,<br>1839030562), m, l, n[e + 14], 23, -35309556), v = c(v, m = c(m, l = c(l,<br>g, v, m, n[e + 1], 4, -1530992060), g, v, n[e + 4], 11, 1272893353), l,<br>g, n[e + 7], 16, -155497632), m, l, n[e + 10], 23, -1094730640), v = c(v, m = c(<br>m, l = c(l, g, v, m, n[e + 13], 4, 681279174), g, v, n[e], 11, -358537222),<br>l, g, n[e + 3], 16, -722521979), m, l, n[e + 6], 23, 76029189), v = c(v, m = c(m,<br>l = c(l, g, v, m, n[e + 9], 4, -640364487), g, v, n[e + 12], 11, -421815835), l,<br>g, n[e + 15], 16, 530742520), m, l, n[e + 2], 23, -995338651), v = f(v, m = f(m, l = f(<br>l, g, v, m, n[e], 6, -198630844), g, v, n[e + 7], 10, 1126891415), l, g, n[e + 14],<br>15, -1416354905), m, l, n[e + 5], 21, -57434055), v = f(v, m = f(m, l = f(l, g, v, m, n[e +<br>12], 6, 1700485571), g, v, n[e + 3], 10, -1894986606), l, g, n[e + 10], 15, -1051523), m, l,<br>n[e + 1], 21, -2054922799), v = f(v, m = f(m, l = f(l, g, v, m, n[e + 8], 6, 1873313359), g, v,<br>n[e + 15], 10, -30611744), l, g, n[e + 6], 15, -1560198380), m, l, n[e + 13], 21, 1309151649), v =<br>f(v, m = f(m, l = f(l, g, v, m, n[e + 4], 6, -145523070), g, v, n[e + 11], 10, -1120210379), l, g, n[e +<br>2], 15, 718787259), m, l, n[e + 9], 21, -343485551), l = t(l, i), g = t(g, a), v = t(v, d), m = t(m,<br>h);<br>return [l, g, v, m]<br>&#125;<br><br>function a(n) &#123;<br>var t, r = &quot;&quot;,<br>e = 32 * n.length;<br>for (t = 0; t &lt; e; t += 8) r += String.fromCharCode(n[t &gt;&gt; 5] &gt;&gt;&gt; t % 32 &amp; 255);<br>return r<br>&#125;<br><br>function d(n) &#123;<br>var t, r = [];<br>for (r[(n.length &gt;&gt; 2) - 1] = void 0, t = 0; t &lt; r.length; t += 1) r[t] = 0;<br>var e = 8 * n.length;<br>for (t = 0; t &lt; e; t += 8) r[t &gt;&gt; 5] |= (255 &amp; n.charCodeAt(t / 8)) &lt;&lt; t % 32;<br>return r<br>&#125;<br><br>function h(n) &#123;<br>return a(i(d(n), 8 * n.length))<br>&#125;<br><br>function l(n, t) &#123;<br>var r, e, o = d(n),<br>u = [],<br>c = [];<br>for (u[15] = c[15] = void 0, o.length &gt; 16 &amp;&amp; (o = i(o, 8 * n.length)), r = 0; r &lt; 16; r += 1) u[r] =<br>909522486 ^ o[r], c[r] = 1549556828 ^ o[r];<br>return e = i(u.concat(d(t)), 512 + 8 * t.length), a(i(c.concat(e), 640))<br>&#125;<br><br>function g(n) &#123;<br>var t, r, e = &quot;&quot;;<br>for (r = 0; r &lt; n.length; r += 1) t = n.charCodeAt(r), e += &quot;0123456789abcdef&quot;.charAt(t &gt;&gt;&gt; 4 &amp; 15) +<br>&quot;0123456789abcdef&quot;.charAt(15 &amp; t);<br>return e<br>&#125;<br><br>function v(n) &#123;<br>return unescape(encodeURIComponent(n))<br>&#125;<br><br>function m(n) &#123;<br>return h(v(n))<br>&#125;<br><br>function p(n) &#123;<br>return g(m(n))<br>&#125;<br><br>function s(n, t) &#123;<br>return l(v(n), v(t))<br>&#125;<br><br>function C(n, t) &#123;<br>return g(s(n, t))<br>&#125;<br><br>function A(n, t, r) &#123;<br>return t ? r ? s(t, n) : C(t, n) : r ? m(n) : p(n)<br>&#125;<br>&quot;function&quot; == typeof define &amp;&amp; define.amd ? define(function() &#123;<br>return A<br>&#125;) : &quot;object&quot; == typeof module &amp;&amp; module.exports ? module.exports = A : n.md5 = A<br>&#125;(this);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="算法" scheme="http://example.com/salty.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Nginx+uWSGI部署</title>
    <link href="http://example.com/salty.github.io/2022/09/05/Nginx+uWSGI%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/salty.github.io/2022/09/05/Nginx+uWSGI%E9%83%A8%E7%BD%B2/</id>
    <published>2022-09-04T16:00:00.000Z</published>
    <updated>2023-03-24T06:58:07.181Z</updated>
    
    <content type="html"><![CDATA[<p>Linux系统为Centos7</p><h2 id="一、Nginx是什么"><a href="#一、Nginx是什么" class="headerlink" title="一、Nginx是什么"></a>一、Nginx是什么</h2><p>Nginx类似Apache，一样都是一种Web服务器，基于REST架构风格。<br>Apache的发展时期很长，而且是毫无争议的世界第一大服务器。它有着很多优点：稳定、开源、跨平台等等。它出现的时间太长了，它兴起的年代，互联网产业远远比不上现在。所以它被设计为一个重量级并且不支持高并发的服务器。在Apache上运行数以万计的并发访问，会导致服务器消耗大量内存。操作系统对其进行进程或线程间的切换也消耗了大量的CPU资源，导致HTTP请求的平均响应速度降低。这些都决定了Apache不可能成为高性能WEB服务器。因此，轻量级高并发服务器Nginx就应运而生了。</p><h2 id="二、Nginx的作用"><a href="#二、Nginx的作用" class="headerlink" title="二、Nginx的作用"></a>二、Nginx的作用</h2><p>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器；同时也是一个IMAP、POP3、SMTP代理服务器；Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现。</p><h2 id="三、关于代理"><a href="#三、关于代理" class="headerlink" title="三、关于代理"></a>三、关于代理</h2><p>说到代理，首先我们要明确一个概念，所谓代理就是一个代表、一个渠道；<br>此时就涉及到两个角色，一个是被代理角色，一个是目标角色。被代理角色通过这个代理访问目标角色完成一些任务的过程称为代理操作过程。如同生活中租房子，房东把房子交给中介，租客让中介帮忙找房子，这个中介就是代理，被代理的角色就是房东，目标角色就是用户。</p><ol><li><strong>正向代理</strong></li></ol><p>比如我们要访问国外的网站：Google，我们需要挂VPN。当我们用VPN访问Google的时候，我们的请求会先走到VPN（代理服务器），VPN（代理服务器）去访问Google，然后将访问到的数据传递给我们。这个VPN就是起到了一个正向代理的作用。</p><ol start="2"><li><strong>反向代理</strong></li></ol><p>比如双11的时候我们访问淘宝，同时连接到网站的访问人数已经爆表，单个服务器远远不能满足人民日益增长的购买欲望了，此时就出现了：分布式部署。也就是通过部署多台服务器来解决访问人数限制的问题；淘宝网站中大部分功能也是直接使用Nginx进行反向代理实现的。</p><ol start="3"><li><strong>负载均衡</strong></li></ol><p>负载均衡建立在现有网络结构之上，它提供了一种廉价有效透明的方法扩展服务器的带宽、增加吞吐量、加强网络数据处理能力、提高网络的灵活性和可用性。<br>负载均衡其意思就是分摊到多个操作单元上进行执行，例如Web服务器、FTP服务器等，从而共同完成工作任务。</p><h2 id="四、安装-Nginx"><a href="#四、安装-Nginx" class="headerlink" title="四、安装 Nginx"></a>四、安装 Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo yum install -y nginx<br></code></pre></td></tr></table></figure><p>安装成功后默认的配置文件为：<code>/etc/nginx/nginx.conf</code></p><h2 id="五、防火墙配置"><a href="#五、防火墙配置" class="headerlink" title="五、防火墙配置"></a>五、防火墙配置</h2><p>打开防火墙可保护我们的服务器</p><ul><li><p>查看防火墙状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --state<br></code></pre></td></tr></table></figure></li><li><p>防火墙开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable firewalld.service<br></code></pre></td></tr></table></figure></li><li><p>打开防火墙服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start firewalld.service<br></code></pre></td></tr></table></figure></li><li><p>查看防火墙开启的端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --list-ports<br></code></pre></td></tr></table></figure></li><li><p>防火墙打开端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">firewall-cmd --add-port=80/tcp --add-port=443/tcp<br></code></pre></td></tr></table></figure></li></ul><p>注：部署新服务的同时，也需要在腾讯云或阿里云服务器后台的安全组打开端口</p><h2 id="六、配置Nginx"><a href="#六、配置Nginx" class="headerlink" title="六、配置Nginx"></a>六、配置Nginx</h2><ol><li>修改<code>/etc/nginx/nginx.conf</code>配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 工作进程数<br>worker_processes  4;<br><br># 配置事件<br>events &#123;<br>    # 最大连接数<br>    worker_connections  100000;<br>&#125;<br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br>    # 开启上下文，提升性能<br>    sendfile        on;<br>    # 关闭请求成功日志<br>    access_log      off;<br>    # 长链接断开超时时间<br>    keepalive_timeout  65;<br><br>    # 配置后端服务<br>    server &#123;<br>        # 监听80端口<br>        listen 80;<br>        # 站点，可配置ip+端口或域名<br>        server_name  xxxx.cn;<br>        charset utf-8;<br>        client_max_body_size 75M;<br>        # 访问80端口的根目录配置<br>        location / &#123;<br>           include uwsgi_params;<br>           proxy_pass http://127.0.0.1:8001;  #端口要和uwsgi里配置的一样<br>           uwsgi_read_timeout 30;<br>        &#125;<br>        location /static/ &#123;<br>           alias /xx/xxxx/static/; #静态资源路径<br>        &#125;<br>    &#125;<br>    # 配置前端服务<br>    server &#123;<br>        # 监听80端口<br>        listen 80;<br>        # 站点，可配置ip+端口或域名<br>        server_name  xxxx.cn;<br>        # 访问80端口的根目录配置<br>        location / &#123;<br>            # 首页文件名<br>            index index.html;<br>            # 项目根目录<br>            root /xxx/xxx;<br>            try_files $uri $uri/ /index.html;<br>        &#125;<br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="七、操作-Nginx"><a href="#七、操作-Nginx" class="headerlink" title="七、操作 Nginx"></a>七、操作 Nginx</h2><ul><li><p>启动Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start nginx<br></code></pre></td></tr></table></figure></li><li><p>停止Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl stop nginx<br></code></pre></td></tr></table></figure></li><li><p>重启Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl restart nginx<br></code></pre></td></tr></table></figure></li><li><p>查看Nginx状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status nginx<br></code></pre></td></tr></table></figure></li><li><p>Nginx开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable nginx<br></code></pre></td></tr></table></figure></li><li><p>禁用Nginx开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl disable nginx<br></code></pre></td></tr></table></figure></li><li><p>Nginx配置文件自检</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -t<br></code></pre></td></tr></table></figure></li></ul><h2 id="八、uWSGI是什么"><a href="#八、uWSGI是什么" class="headerlink" title="八、uWSGI是什么"></a>八、uWSGI是什么</h2><p>uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。</p><h2 id="九、配置uWSGI"><a href="#九、配置uWSGI" class="headerlink" title="九、配置uWSGI"></a>九、配置uWSGI</h2><ul><li><p>在项目根目录下创建 <code>uwsgi.ini</code> 配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch uwsgi.ini<br></code></pre></td></tr></table></figure></li><li><p>uWSGI配置文件例子如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">[uwsgi]<br># 同时打开http和socket协议<br>http-socket = 0.0.0.0:8001<br>chdir = 项目根目录<br># 使进程在后台运行，并将日志打到指定的日志文件<br>daemonize = 日志路径<br># 启动主进程，来管理其他进程<br>master = true<br># 启动8个工作进程<br>processes = 8<br># 启动4个工作线程<br>threads = 4<br># 当服务器退出的时候自动删除unix socket文件和pid文件<br>vacuum = true<br>py-autoreload = 1<br>static-map = /static=/xx/xxxx/static<br># 设置socket的监听队列大小（默认：100）<br>listen = 1000<br># 一个请求花费的时间超过了该时间，当前工作进程自动重启<br>harakiri = 30<br># 为每个工作进程设置请求数的上限<br>max-requests = 5000<br># 设置在平滑重启（直到接收到的请求处理完才重启）<br>reload-mercy = 8<br></code></pre></td></tr></table></figure></li></ul><h2 id="十、操作uWSGI"><a href="#十、操作uWSGI" class="headerlink" title="十、操作uWSGI"></a>十、操作uWSGI</h2><ul><li>运行uWSGI服务<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">uwsgi --ini uwsgi.ini<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Linux系统为Centos7&lt;/p&gt;
&lt;h2 id=&quot;一、Nginx是什么&quot;&gt;&lt;a href=&quot;#一、Nginx是什么&quot; class=&quot;headerlink&quot; title=&quot;一、Nginx是什么&quot;&gt;&lt;/a&gt;一、Nginx是什么&lt;/h2&gt;&lt;p&gt;Nginx类似Apache，一</summary>
      
    
    
    
    <category term="服务器" scheme="http://example.com/salty.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="服务器" scheme="http://example.com/salty.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>uni-app requset请求封装_api封装</title>
    <link href="http://example.com/salty.github.io/2022/09/05/uni-app%20requset%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85_api%E5%B0%81%E8%A3%85/"/>
    <id>http://example.com/salty.github.io/2022/09/05/uni-app%20requset%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85_api%E5%B0%81%E8%A3%85/</id>
    <published>2022-09-04T16:00:00.000Z</published>
    <updated>2023-03-24T06:56:54.784Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Request</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/request.js&#x27;</span><br><span class="hljs-keyword">import</span> operate <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./operate.js&#x27;</span><br><span class="hljs-keyword">let</span> request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>().<span class="hljs-property">http</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getemoji = <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-comment">//拼接路径</span><br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>    <span class="hljs-attr">data</span>: data<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-comment">//接口</span><br><span class="hljs-attr">api</span>: <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> operate <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../common/operate.js&#x27;</span><br><span class="hljs-comment">// vuex 的使用  详情参考官网 https://uniapp.dcloud.io/vue-vuex</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../store/index.js&#x27;</span>  <br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Request</span> &#123;<br>    <span class="hljs-title function_">http</span>(<span class="hljs-params">param</span>) &#123;<br>        <span class="hljs-comment">// 请求参数</span><br>        <span class="hljs-keyword">var</span> url = param.<span class="hljs-property">url</span>,<br>            method = param.<span class="hljs-property">method</span>,<br>            header = &#123;&#125;,<br>            data = param.<span class="hljs-property">data</span> || &#123;&#125;,<br>            hideLoading = param.<span class="hljs-property">hideLoading</span> || <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-comment">//拼接完整请求地址</span><br>        <span class="hljs-keyword">var</span> requestUrl = operate.<span class="hljs-property">api</span> + url;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(requestUrl)<br>       <span class="hljs-comment">//拼接完整请求地址（根据环境切换）</span><br>       <span class="hljs-comment">// var requestUrl = operate.api() + url;</span><br><br>        <span class="hljs-comment">//请求方式:GET或POST(POST需配置</span><br>        <span class="hljs-comment">// header: &#123;&#x27;content-type&#x27; : &quot;application/x-www-form-urlencoded&quot;&#125;,)</span><br>        <span class="hljs-keyword">if</span> (method) &#123;<br>            method = method.<span class="hljs-title function_">toUpperCase</span>(); <span class="hljs-comment">//小写改为大写</span><br>            <span class="hljs-keyword">if</span> (method == <span class="hljs-string">&quot;GET&quot;</span>) &#123;<br>                header = &#123;<br>                    <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>                &#125;;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                header = &#123;<br>                    <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&quot;application/json&quot;</span><br>                &#125;;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//加载圈</span><br>        <span class="hljs-keyword">if</span> (!hideLoading) &#123;<br>            uni.<span class="hljs-title function_">showLoading</span>(&#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;加载中...&#x27;</span><br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-comment">// 返回promise</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// 请求</span><br>            uni.<span class="hljs-title function_">request</span>(&#123;<br>                <span class="hljs-attr">url</span>: requestUrl,<br>                <span class="hljs-attr">data</span>: data,<br>                <span class="hljs-attr">method</span>: method,<br>                <span class="hljs-attr">header</span>: header,<br>                <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>                    <span class="hljs-comment">// 判断 请求api 格式是否正确</span><br>                    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">statusCode</span> &amp;&amp; res.<span class="hljs-property">statusCode</span> != <span class="hljs-number">200</span>) &#123;<br>                        uni.<span class="hljs-title function_">showToast</span>(&#123;<br>                            <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;api错误&quot;</span> + res.<span class="hljs-property">errMsg</span>,<br>                            <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;none&#x27;</span><br>                        &#125;);<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    <span class="hljs-comment">// 将结果抛出</span><br>                    <span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>)<br>                &#125;,<br>                <span class="hljs-comment">//请求失败</span><br>                <span class="hljs-attr">fail</span>: <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>                    uni.<span class="hljs-title function_">showToast</span>(&#123;<br>                        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;&quot;</span> + e.<span class="hljs-property">data</span>,<br>                        <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;none&#x27;</span><br>                    &#125;);<br>                    <span class="hljs-title function_">resolve</span>(e.<span class="hljs-property">data</span>);<br>                &#125;,<br>                <span class="hljs-comment">//请求完成</span><br>                <span class="hljs-title function_">complete</span>(<span class="hljs-params"></span>) &#123;<br>                    <span class="hljs-comment">//隐藏加载</span><br>                    <span class="hljs-keyword">if</span> (!hideLoading) &#123;<br>                        uni.<span class="hljs-title function_">hideLoading</span>();<br>                    &#125;<br>                    <span class="hljs-title function_">resolve</span>();<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;)<br>        &#125;)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="小程序" scheme="http://example.com/salty.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>uni-app搜索页面（本地历史记录缓存）</title>
    <link href="http://example.com/salty.github.io/2022/09/03/uni-app%E6%90%9C%E7%B4%A2%E9%A1%B5%E9%9D%A2%EF%BC%88%E6%9C%AC%E5%9C%B0%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E7%BC%93%E5%AD%98%EF%BC%89/"/>
    <id>http://example.com/salty.github.io/2022/09/03/uni-app%E6%90%9C%E7%B4%A2%E9%A1%B5%E9%9D%A2%EF%BC%88%E6%9C%AC%E5%9C%B0%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E7%BC%93%E5%AD%98%EF%BC%89/</id>
    <published>2022-09-02T16:00:00.000Z</published>
    <updated>2023-03-24T06:56:36.476Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;view class=&quot;container&quot;&gt;<br>&lt;view class=&quot;search-btn&quot; @click=&quot;focus()&quot;&gt;<br>&lt;uni-search-bar @confirm=&quot;search&quot; bgColor=&quot;#EDEDED&quot; radius=&quot;20&quot; cancelButton=&quot;none&quot; placeholder=&quot;输入模板关键字&quot;<br>v-model=&quot;searchValue&quot;&gt; &lt;/uni-search-bar&gt;<br>&lt;/view&gt;<br>&lt;view class=&quot;history&quot;&gt;<br>&lt;view class=&quot;title&quot;&gt;<br>&lt;text style=&quot;font-weight: 900;&quot;&gt;历史记录&lt;/text&gt;<br>&lt;uni-icons type=&quot;trash&quot; size=&quot;20&quot; @click=&quot;clean()&quot;&gt;&lt;/uni-icons&gt;<br>&lt;/view&gt;<br>&lt;view class=&quot;example-body&quot;&gt;<br>&lt;view class=&quot;tag-view&quot; v-for=&quot;(item,index) in list&quot; @longpress=&quot;deleted(index)&quot;&gt;<br>&lt;uni-tag :circle=&quot;true&quot; :text=&quot;item&quot; @click=&quot;tohistory(item)&quot;<br>custom-style=&quot;background-color: #F4F4F4; border-color:#F4F4F4; color: #2f2f2f;&quot; /&gt;<br>&lt;/view&gt;<br>&lt;/view&gt;<br>&lt;/view&gt;<br>&lt;uni-popup ref=&quot;popup&quot; type=&quot;dialog&quot;&gt;<br>&lt;uni-popup-dialog mode=&quot;base&quot; message=&quot;成功消息&quot; title=&quot;确认删除？&quot; :duration=&quot;2000&quot; :before-close=&quot;true&quot;<br>@close=&quot;close&quot; @confirm=&quot;confirm&quot;&gt;&lt;/uni-popup-dialog&gt;<br>&lt;/uni-popup&gt;<br>&lt;uni-popup ref=&quot;clean&quot; type=&quot;dialog&quot;&gt;<br>&lt;uni-popup-dialog mode=&quot;base&quot; message=&quot;成功消息&quot; title=&quot;删除全部历史记录？&quot; :duration=&quot;2000&quot; :before-close=&quot;true&quot;<br>@close=&quot;close&quot; @confirm=&quot;clearall&quot;&gt;&lt;/uni-popup-dialog&gt;<br>&lt;/uni-popup&gt;<br>&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>data() &#123;<br>return &#123;<br>searchValue: &#x27;&#x27;,<br>list: [],<br>index: &#x27;&#x27;<br>&#125;<br>&#125;,<br>methods: &#123;<br>// 去重<br>removeDuplicate(arr) &#123;<br>const newArr = []<br>arr.forEach(item =&gt; &#123;<br>if (newArr.indexOf(item) === -1) &#123;<br>newArr.push(item)<br>&#125;<br>&#125;)<br>return newArr // 返回一个新数组<br>&#125;,<br>search(res) &#123;<br><br>this.list.push(res.value)<br>this.list = this.removeDuplicate(this.list)<br>uni.setStorageSync(&#x27;history&#x27;, this.list)<br><br>uni.navigateTo(&#123;<br>url:&#x27;../calorie_category/calorie_category?word=&#x27;+ res.value<br>&#125;)<br>this.searchValue = &#x27;&#x27;<br>&#125;,<br>deleted(index) &#123;<br>this.$refs.popup.open()<br>this.index = index<br>&#125;,<br>clean() &#123;<br>this.$refs.clean.open()<br>&#125;,<br>clearall() &#123;<br>this.list = []<br>uni.setStorageSync(&#x27;history&#x27;, this.list)<br>this.$refs.clean.close()<br>&#125;,<br>confirm() &#123;<br>this.list.splice(this.index, 1)<br>this.$refs.popup.close()<br>this.index = &#x27;&#x27;<br>uni.setStorageSync(&#x27;history&#x27;, this.list)<br>&#125;,<br>close() &#123;<br>this.$refs.popup.close()<br>this.$refs.clean.close()<br>&#125;,<br>tohistory(item) &#123;<br>uni.navigateTo(&#123;<br>url:&#x27;../calorie_category/calorie_category?word=&#x27;+ item<br>&#125;)<br>&#125;,<br>focus() &#123;<br><br>&#125;<br>&#125;,<br>onLoad() &#123;<br>if (uni.getStorageSync(&#x27;history&#x27;)) &#123;<br>this.list = uni.getStorageSync(&#x27;history&#x27;)<br>&#125;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.container &#123;<br>height: 100%;<br>background-color: white;<br>&#125;<br><br>.history &#123;<br>margin: 20rpx;<br>&#125;<br><br>.title &#123;<br>display: flex;<br>justify-content: space-between;<br>margin: 20rpx 0;<br>&#125;<br><br>.example-body &#123;<br>display: flex;<br>flex-direction: row;<br>justify-content: flex-start;<br>align-items: flex-end;<br>flex-wrap: wrap;<br>&#125;<br><br>.tag-view &#123;<br>margin-right: 10px;<br>&#125;<br><br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="小程序" scheme="http://example.com/salty.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>this相关</title>
    <link href="http://example.com/salty.github.io/2022/08/15/this%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/salty.github.io/2022/08/15/this%E7%9B%B8%E5%85%B3/</id>
    <published>2022-08-14T16:00:00.000Z</published>
    <updated>2023-03-24T06:57:38.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是this？"><a href="#什么是this？" class="headerlink" title="什么是this？"></a>什么是this？</h2><p>在JavaScript中，全局里的this都指向最顶层（浏览器中即window）。</p><h2 id="关于绑定"><a href="#关于绑定" class="headerlink" title="关于绑定"></a>关于绑定</h2><h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">function f00() &#123;<br>  console.log(this.a);<br>&#125;<br><br>var a = 2;<br><br>foo(); // 2<br></code></pre></td></tr></table></figure><p>在全局作用域下用 var 关键字声明的变量和在全局声明的 函数 会被挂载到全局对象(window)上。调用 foo() 时,我们都知道,全局声明的函数的作用域是顶层的 globalObject 在浏览器中也就是 window。<br>在代码中,foo() 是直接使用不带任何修饰的函数引用进行调用的,因此只能使用默认绑定,所以函数中的 this 为 window,也就是 window.a,所以自然而然的就输出 2 了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">function f00() &#123;<br>  &quot;use strict&quot;;<br><br>  console.log(this.a);<br>&#125;<br><br>var a = 2;<br><br>f00(); // Cannot read properties of undefined (reading &#x27;a&#x27;)<br><br>// 因为严格默认情况下,默认绑定,this会被绑定为 undefined ,所以this.a也就等于undivided.a<br>// 因为 undefined 下没有 a 的属性,所以会报类型错误<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vue">function f00() &#123;<br>  console.log(this.a);<br>&#125;<br><br>var a = 2;<br><br>(function () &#123;<br>  &quot;use strict&quot;;<br>  f00(); // 2<br>&#125;)();<br>  //如果 foo()运行在非 strict mode 下时,默认绑定才能绑定到全局对象,在严格模式 foo() 则不影响默认绑定。<br></code></pre></td></tr></table></figure><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><p>隐式绑定的规则是调用位置是否有上下文对象,或者说是否被某个对象拥有或者包含。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vue">function foo() &#123;<br>  console.log(this.a);<br>&#125;<br><br>var obj = &#123;<br>  a: 111,<br>  foo,<br>&#125;;<br><br>obj.foo(); // 111<br></code></pre></td></tr></table></figure><p>需要注意的是 foo() 的声明方式,以其之后是如何被当做引用属性添加到 obj 对象中的。但是无论是直接在 obj 中定义还是先定义再添加为引用属性,这个函数严格来说都不属于 obj 对象。<br>然而调用位置会使用 obj 上下文来引用函数,因此你可以说函数被调用时 obj 对象 “拥有” 或者 “包含” 函数引用。<br>当函数引用有上下文对象时,隐式绑定规则会把函数调用中的this绑定到这个上下文对象。因此 this.a 和 obj.a 是一样的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">function foo() &#123;<br>  console.log(this.a);<br>&#125;<br><br>var obj2 = &#123;<br>  a: 111,<br>  foo,<br>&#125;;<br><br>var obj1 = &#123;<br>  a: 777,<br>  obj2,<br>&#125;;<br><br>obj1.obj2.foo(); // 111<br><br>// 对象 obj2 为最后一层<br>// obj1.obj2 仅为属性查找,并还没有开始调用<br></code></pre></td></tr></table></figure><h4 id="函数脱离原上下文"><a href="#函数脱离原上下文" class="headerlink" title="函数脱离原上下文"></a>函数脱离原上下文</h4><p>一个最常见 this 绑定问题就是被隐式绑定的函数会丢失绑定对象,也就是说他会应用默认绑定默认。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vue">function foo() &#123;<br>  console.log(this.a);<br>&#125;<br><br>var obj = &#123;<br>  a: 2,<br>  foo,<br>&#125;;<br><br>var bar = obj.foo; // 函数别名<br><br>var a = &quot;我是全局a&quot;;<br><br>bar(); // 我是全局a<br></code></pre></td></tr></table></figure><p>虽然 bar 是 obj.foo 的一个引用,但是实际上,它引用的是 foo 函数的本身,因此此时的 bar() 其实是一个普通的函数调用 因此应用了默认绑定。<br>这实际上是重新定义了一个 bar 函数,和对象的结构一样,都是重新赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">function foo() &#123;<br>  console.log(this.a);<br>&#125;<br><br>var obj = &#123;<br>  a: 2,<br>  foo,<br>&#125;;<br><br>var &#123; foo &#125; = obj; // 这里相当于重新定义了一个函数或者说这是一个函数别名<br><br>var a = &quot;我是window下的a&quot;;<br><br>foo(); // 我是window下的a<br><br>var object = &#123;<br>  moment: 777,<br>  age: 18,<br>&#125;;<br><br>console.log(object); // &#123;moment: 777, age: 18&#125;<br>var &#123; moment &#125; = object;<br><br>moment = &quot;牛逼&quot;;<br><br>console.log(moment); // 牛逼<br><br>console.log(object); // &#123;moment: 777, age: 18&#125;<br></code></pre></td></tr></table></figure><p>实际上在全局作用域中创建了一个变量 moment 并赋值为 777,后面的直接修改变量不修改对象 object 中的属性 moment。</p><h4 id="函数作为参数"><a href="#函数作为参数" class="headerlink" title="函数作为参数"></a>函数作为参数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">function foo() &#123;<br>  console.log(this.a);<br>&#125;<br><br>function bar(fn) &#123;<br>  // fn 其实是引用 foo<br><br>  fn();<br>&#125;<br><br>var obj = &#123;<br>  a: 777,<br>  foo,<br>&#125;;<br><br>var a = &quot;牛逼啊,这也行&quot;;<br><br>bar(obj.foo); // 牛逼啊,这也行<br></code></pre></td></tr></table></figure><p>参数传递其实就是一种隐式赋值,因此我们传入函数时也会被隐式赋值,上面这段代码实际上就是以下代码的变体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">function foo() &#123;<br>  console.log(this.a);<br>&#125;<br><br>function bar() &#123;<br>  const fn = obj.foo;<br><br>  fn();<br>&#125;<br><br>var obj = &#123;<br>  a: 777,<br>  foo,<br>&#125;;<br><br>var a = &quot;牛逼啊,这也行&quot;;<br><br>bar(); // 牛逼啊,这也行<br></code></pre></td></tr></table></figure><h3 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h3><p>一般情况下，宿主环境提供的一些函数还是你自己创建的函数,你都可以使用 call(…) 和 apply(…) 方法。<br>他们的第一个参数是一个对象,是给this准备的,接着在调用函数时将其绑定到 this。因为你可以直接指定 this 的绑定对象,因此我们称之为 <strong>显示绑定</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue">function foo() &#123;<br>  console.log(this.a);<br>&#125;<br><br>var obj = &#123;<br>  a: 2,<br>&#125;;<br><br>var bar = function () &#123;<br>  foo.call(obj);<br>&#125;;<br><br>bar(); // 2<br>setTimeout(bar, 1000); // 2<br><br>// 硬绑定的 bar 不可能再修改他的 this<br><br>bar.call(window); // 2<br></code></pre></td></tr></table></figure><p>许多内置函数,都提供了一个可选的参数,通常成为 上下文,其作用和 bind(…) 一样,确保你的回调函数使用指定的 this。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>function callback(element) &#123;<br>  console.log(element, this.id);<br>&#125;<br><br>var obj = &#123;<br>  id: &quot;真不错&quot;,<br>&#125;;<br><br>// 调用 foo(...) 时把 this 绑定到 obj 上<br>[1, 2, 3].forEach(callback, obj);<br>// 1 &#x27;真不错&#x27;  2 &#x27;真不错&#x27;  3 &#x27;真不错&#x27;<br><br>// 俺 map 也一样<br><br>[1, 2, 3].map(callback, obj);<br>// 1 &#x27;真不错&#x27;  2 &#x27;真不错&#x27;  3 &#x27;真不错&#x27;<br><br></code></pre></td></tr></table></figure><h3 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h3><p>使用 new 来调用构造函数会执行：</p><ol><li>在内存中创建一个新对象;</li><li>这个新对象内部的 [[prototype]] 特性 被赋值为构造函数的 prototype属性 </li><li>构造函数中内部的 this 被赋值为这个新对象(即 this 指向新对象);</li><li>执行构造函数内部的代码(给新对象添加属性);</li><li><strong><em>如果构造函数返回非空对象,则返回该对象;否则,返回刚创建的新对象;</em></strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue"><br>function Foo(moment) &#123;<br>  this.moment = moment;<br>&#125;<br><br>var bar = new Foo(777);<br><br>console.log(bar.a); // 777<br>  // 使用 new 来调用 Foo(...) 时,我们会构造一个新对象并把他绑定到 Foo(...) 调用中的 this 上。<br></code></pre></td></tr></table></figure>如果构造函数返回一个对象,则该对象将作为整个表达式的值返回,而传入的构造函数的 this 将会被抛弃。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> mayDay = &#123;<br>  <span class="hljs-attr">moment</span>: <span class="hljs-string">&quot;moment&quot;</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">moment</span> = <span class="hljs-number">777</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">111</span>; <span class="hljs-comment">// 这里的返回值变化了</span><br>&#125;<br><br><span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bar.<span class="hljs-property">moment</span>); <span class="hljs-comment">// 777 输出的是新对象的 moment</span><br><br></code></pre></td></tr></table></figure></li></ol><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>箭头函数表达式的语法比函数表达式更简洁,并且没有自己的 this, arguments,super或new.target。箭头函数表达式更适用于那些本来需要匿名函数的地方,并且它不能用作构造函数。正是因为箭头函数没有 this,自然而然的就不能使用 new 操作符了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">var</span> moment = <span class="hljs-string">&quot;moment&quot;</span>;<br><br><span class="hljs-keyword">var</span> bar = &#123;<br>  <span class="hljs-attr">moment</span>: <span class="hljs-number">777</span>,<br>  <span class="hljs-attr">general</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">moment</span>);<br>  &#125;,<br>  <span class="hljs-attr">arrow</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">moment</span>);<br>  &#125;,<br>  <span class="hljs-attr">nest</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title function_">callback</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">moment</span>);<br>    &#125;;<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;,<br>&#125;;<br><br>bar.<span class="hljs-title function_">general</span>(); <span class="hljs-comment">// 777</span><br>bar.<span class="hljs-title function_">arrow</span>(); <span class="hljs-comment">// moment</span><br>bar.<span class="hljs-title function_">nest</span>(); <span class="hljs-comment">// 777</span><br><br></code></pre></td></tr></table></figure><h2 id="apply，bind-以及-call"><a href="#apply，bind-以及-call" class="headerlink" title="apply，bind 以及 call"></a>apply，bind 以及 call</h2><p>apply和call的用法大同只不过传入的参数不同。<br>apply的第二个参数传的是参数类数组，call是多个参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>.<span class="hljs-title function_">call</span>(thisArg, arg1, arg2, ...)<br><span class="hljs-keyword">function</span>.<span class="hljs-title function_">apply</span>(thisArg, [argArray])<br></code></pre></td></tr></table></figure><p>thisArg：在 fun 函数运行时指定的 this 值。需要注意的是，指定的 this 值并不一定是该函数执行时真正的 this 值，如果这个函数处于非严格模式下，则指定为 null 或 undefined 时会自动指向全局对象（浏览器中就是window对象），同时值为原始值（数字，字符串，布尔值）的 this 会指向该原始值的自动包装对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">  <span class="hljs-keyword">var</span> a =&#123;<br>      name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br>      fn : <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a + b)<br>      &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">var</span> b = a.<span class="hljs-property">fn</span>;<br>  b.<span class="hljs-title function_">call</span>(a,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)       <span class="hljs-comment">// 3</span><br>b.<span class="hljs-title function_">apply</span>(a,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>])       <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><p>bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。<br><strong>引用MDN上的</strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#%E6%8F%8F%E8%BF%B0"><strong>描述</strong></a><strong>：</strong><br><strong>bind()</strong> 函数会创建一个新的<strong>绑定函数</strong>（<strong>bound function</strong>，BF）。绑定函数是一个 exotic function object（怪异函数对象，ECMAScript 2015 中的术语），它包装了原函数对象。调用<strong>绑定函数</strong>通常会导致执行<strong>包装函数</strong>。 <strong>绑定函数</strong>具有以下内部属性：</p><ul><li><strong>[[BoundTargetFunction]]</strong> - 包装的函数对象</li><li><strong>[[BoundThis]]</strong> - 在调用包装函数时始终作为 <strong>this</strong> 值传递的值。</li><li><strong>[[BoundArguments]]</strong> - 列表，在对包装函数做任何调用都会优先用列表元素填充参数列表。</li><li><strong>[[Call]]</strong> - 执行与此对象关联的代码。通过函数调用表达式调用。内部方法的参数是一个<strong>this</strong>值和一个包含通过调用表达式传递给函数的参数的列表。</li></ul><p>当调用绑定函数时，它调用 <strong>[[BoundTargetFunction]]</strong> 上的内部方法 **[[Call]]**，就像这样 <strong>Call(<em>boundThis</em>, <em>args</em>)<strong>。其中，</strong>boundThis</strong> 是 <strong>[[BoundThis]]<strong>，</strong>args</strong> 是 <strong>[[BoundArguments]]</strong> 加上通过函数调用传入的参数列表。<br>绑定函数也可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new">new</a> 运算符构造，它会表现为目标函数已经被构建完毕了似的。提供的 this 值会被忽略，但前置参数仍会提供给模拟函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a =&#123;<br>    name : <span class="hljs-string">&quot;Cherry&quot;</span>,<br>    fn : <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a + b)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> b = a.<span class="hljs-property">fn</span>;<br>b.<span class="hljs-title function_">bind</span>(a,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)()           <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是this？&quot;&gt;&lt;a href=&quot;#什么是this？&quot; class=&quot;headerlink&quot; title=&quot;什么是this？&quot;&gt;&lt;/a&gt;什么是this？&lt;/h2&gt;&lt;p&gt;在JavaScript中，全局里的this都指向最顶层（浏览器中即window）。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="js" scheme="http://example.com/salty.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>从promise到async</title>
    <link href="http://example.com/salty.github.io/2022/08/14/%E4%BB%8Epromise%E5%88%B0async/"/>
    <id>http://example.com/salty.github.io/2022/08/14/%E4%BB%8Epromise%E5%88%B0async/</id>
    <published>2022-08-13T16:00:00.000Z</published>
    <updated>2023-03-24T06:50:27.708Z</updated>
    
    <content type="html"><![CDATA[<p>JS是一项单线程语言，所有的任务都会在一条线程上执行，但是一些高消耗的操作会堵塞线程。因此JS有同步模式和异步模式。<br>首先宏任务是由node&amp;浏览器主动发起的，而微任务是JS本身发起的<br>宏任务：setTimeout，setInterval，script（整体代码块）<br>微任务：promise.the……,nexttick</p><h1 id="宏任务与微任务在eventloop中的执行顺序"><a href="#宏任务与微任务在eventloop中的执行顺序" class="headerlink" title="宏任务与微任务在eventloop中的执行顺序"></a>宏任务与微任务在eventloop中的执行顺序</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/webp/29366322/1660275066442-6c2818dc-88df-447f-a0bb-6a293e97e297.webp#clientId=u49dad62b-8b4b-4&from=paste&id=u6e30d84e&originHeight=529&originWidth=491&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u8e710615-c6b0-4478-b0d8-61f2fb6894b&title="><br>简单来说第一个宏任务执行，如果微任务队列存在，则将所有的微任务执行完再继续执行下一个宏任务，直到所有的宏任务执行完毕。</p><h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><p>promise有三种状态：pending(等待态)，fulfiled(成功态)，rejected(失败态)；状态一旦改变，就不会再变。创造promise实例后，它会立即执行。<br>在异步任务中，最常见的就是请求嵌套，但小程序的requset请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">uni.<span class="hljs-title function_">requset</span>(&#123;<br>  <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>  <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>)&#123;<br>    uni.<span class="hljs-title function_">requset</span>(&#123;<br>      <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>      <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>)&#123;<br>        uni.<span class="hljs-title function_">requset</span>(&#123;<br>          <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>          <span class="hljs-title function_">success</span>(<span class="hljs-params"></span>)&#123;<br>            <br>          &#125;<br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>这样代码易读性就很烂，就算拆出来单独调用也会增加重复的代码量。（但无所谓）<br>那么promise能干什么呢<br>promise是用来解决两个问题的：</p><ul><li>回调地狱，代码难以维护， 常常第一个的函数的输出是第二个函数的输入这种现象</li><li>promise可以支持多个并发的请求，获取并发请求中的数据</li></ul><h2 id="Promise的使用"><a href="#Promise的使用" class="headerlink" title="Promise的使用"></a>Promise的使用</h2><p>Promise是一个构造函数，自己身上有all、reject、resolve这几个眼熟的方法，原型上有then、catch等同样很眼熟的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//做一些异步操作</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行完成&#x27;</span>);<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;我是成功！！&#x27;</span>);<br>    &#125;, <span class="hljs-number">2000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><em>Promise {<pending>}</em></p><ol><li><strong>proto</strong>: Promise</li><li><em>[[PromiseState]]</em>: “pending”</li><li><em>[[PromiseResult]]</em></li></ol><p>在promise的原型上，我们可以看见他有以下的结构，以及现在的状态，promiseState。</p><ol><li>catch: <em>ƒ catch()</em></li><li>constructor: <em>ƒ Promise()</em></li><li>finally: <em>ƒ finally()</em></li><li>then: <em>ƒ then()</em></li></ol><p>_但我们只需要看_constructor上的东西就行了</p><ol><li>**all: **_<strong>ƒ all()</strong>_</li></ol><h3 id="谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象"><a href="#谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象" class="headerlink" title="谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象"></a>谁跑的慢，以谁为准执行回调。all接收一个数组参数，里面的值最终都算返回Promise对象</h3><ol start="2"><li>allSettled: <em>ƒ allSettled()</em></li><li>any: <em>ƒ any()</em></li><li>arguments: (…)</li><li>caller: (…)</li><li>length: 1</li><li>name: “Promise”</li><li>nv_length: (…)</li><li>prototype: Promise {Symbol(Symbol.toStringTag): “Promise”, constructor: <em>ƒ</em>, then: <em>ƒ</em>, catch: <em>ƒ</em>, finally: <em>ƒ</em>}</li><li>**race: **_<strong>ƒ race()</strong>_</li></ol><h3 id="谁跑的快，以谁为准执行回调"><a href="#谁跑的快，以谁为准执行回调" class="headerlink" title="谁跑的快，以谁为准执行回调"></a>谁跑的快，以谁为准执行回调</h3><ol start="11"><li>**reject: **_<strong>ƒ reject()</strong>_</li></ol><p>把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。then和catch都能捕捉到失败的回调，只不过catch大部分时候是抛出异常让后面的代码继续执行的情况才会使用。</p><ol start="12"><li>**resolve: **_<strong>ƒ resolve()</strong>_</li><li>Symbol(Symbol.hasInstance): <em>ƒ value(e)</em></li><li>Symbol(Symbol.species): (…)</li><li>get Symbol(Symbol.species): <em>ƒ <a href="">Symbol.species</a></em></li></ol><p>then的链式调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;我是成功&#x27;</span>);<br>&#125;)<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);&#125;,<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;&#125;);<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);&#125;,<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;&#125;);<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);&#125;,<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;&#125;);<br></code></pre></td></tr></table></figure><p><em>扩展写法</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">then</span>(<span class="hljs-params">onFulFilled, onRejected</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;resolved&#x27;</span>) &#123;<br>    <span class="hljs-title function_">onFulFilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;rejected&#x27;</span>) &#123;<br>    <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br>  &#125;<br>  <span class="hljs-comment">// 当前既没有完成 也没有失败</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">status</span> === <span class="hljs-string">&#x27;pending&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 存放成功的回调</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">onResolvedCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">onFulFilled</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>    &#125;);<br>    <span class="hljs-comment">// 存放失败的回调</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">onRejectedCallbacks</span>.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">onRejected</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">reason</span>);<br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么在知道了这些情况之后<br>那么我们就可以把请求变成微任务来调用以达成我们需要的异步变同步。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>)=&gt;</span>&#123;<br>    uni.<span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: ,<br>      <span class="hljs-attr">data</span>:,<br>      <span class="hljs-attr">method</span>: ,<br>      <span class="hljs-attr">header</span>:header,<br>      <span class="hljs-attr">complete</span>:<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`耗时<span class="hljs-subst">$&#123;<span class="hljs-built_in">Date</span>.now() - timeStart&#125;</span>`</span>);<br>          <span class="hljs-keyword">if</span>(res.<span class="hljs-property">statusCode</span> ==<span class="hljs-number">200</span>)&#123;<span class="hljs-comment">//请求成功</span><br>            <span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>)<br>          &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-title function_">reject</span>(res);<br>          &#125;<br>      &#125;<br>    &#125;)<br><br><span class="hljs-comment">//暴露出去</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//如果在页面中需要发起多个需要同步的请求，那么</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>  api.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;param1&#x27;</span>),<br>  api.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;param2&#x27;</span>)<br>]).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="async-await"><a href="#async-await" class="headerlink" title="async await"></a>async await</h1><p>async 函数是 Generator 函数的语法糖,但暂时可以先不管Generator 是什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">req</span>(<span class="hljs-params"></span>)&#123;<br>  uni.<span class="hljs-title function_">request</span>(...)<br>&#125;<br></code></pre></td></tr></table></figure><p>Promise 的方式虽然解决了 callback hell，但是这种方式充满了 Promise的 then() 方法，如果处理流程复杂的话，整段代码将充满 then。语义化不明显，代码流程不能很好的表示执行流程。（主要是写起来麻烦）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">delay</span> = timeout =&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span>=&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, timeout));<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">2000</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">3000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;done&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_">f</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)); <span class="hljs-comment">// 等待6s后才输出 &#x27;done&#x27;</span><br></code></pre></td></tr></table></figure><p>我们来模拟一下请求，那么在三个请求发完之后，我们才会继续执行，来达成异步。用法就是这么简单，但是如何来处理错误呢。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">delay</span> = timeout =&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span>=&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, timeout));<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">2000</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">3000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;done&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_">f</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)); <span class="hljs-comment">// 等待3s后才输出 &#x27;error&#x27; </span><br><br></code></pre></td></tr></table></figure><p>当 async 函数中只要一个 await 出现 reject 状态，则后面的 await 都不会被执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">delay</span> = timeout =&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span>=&gt;</span> <span class="hljs-built_in">setTimeout</span>(resolve, timeout));<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">1000</span>);<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">2000</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>    &#125;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-number">3000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;done&#x27;</span>;<br>&#125;<br><br><span class="hljs-title function_">f</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v)); <span class="hljs-comment">// 等待6s后才输出 &#x27;error&#x27; </span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;JS是一项单线程语言，所有的任务都会在一条线程上执行，但是一些高消耗的操作会堵塞线程。因此JS有同步模式和异步模式。&lt;br&gt;首先宏任务是由node&amp;amp;浏览器主动发起的，而微任务是JS本身发起的&lt;br&gt;宏任务：setTimeout，setInterval，script（</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="js" scheme="http://example.com/salty.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>小程序echarts动态渲染过程</title>
    <link href="http://example.com/salty.github.io/2022/08/11/%E5%B0%8F%E7%A8%8B%E5%BA%8Fecharts%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/"/>
    <id>http://example.com/salty.github.io/2022/08/11/%E5%B0%8F%E7%A8%8B%E5%BA%8Fecharts%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/</id>
    <published>2022-08-10T16:00:00.000Z</published>
    <updated>2023-03-24T06:55:04.013Z</updated>
    
    <content type="html"><![CDATA[<p>1.请求的数据先行（request保存数据没什么好说的）<br>2.在最外层定义charts实例为空，ec绑定data外方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ec-canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mychart-dom-pie&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ech1&quot;</span> <span class="hljs-attr">canvas-id</span>=<span class="hljs-string">&quot;mychart-pie&quot;</span> <span class="hljs-attr">ec</span>=<span class="hljs-string">&quot;&#123;&#123; ec &#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ec-canvas</span>&gt;</span><br></code></pre></td></tr></table></figure><p>记得给高度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Charts1</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">getApp</span>();<br><span class="hljs-title class_">Page</span>(&#123;<br>  data&#123;<br>    <span class="hljs-attr">ec</span>:&#123;<br>        <span class="hljs-attr">onInit</span>:initChart1<br>      &#125;<br>  &#125;<br>&#125;)<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">initChart1</span>(<span class="hljs-params">canvas, width, height, dpr</span>) &#123;<br><br>  <span class="hljs-keyword">const</span> chart = echarts.<span class="hljs-title function_">init</span>(canvas, <span class="hljs-literal">null</span>, &#123;<br>    <span class="hljs-attr">width</span>: width,<br>    <span class="hljs-attr">height</span>: height,<br>    <span class="hljs-attr">devicePixelRatio</span>: dpr <span class="hljs-comment">// new</span><br>  &#125;);<br>  canvas.<span class="hljs-title function_">setChart</span>(chart);<br>  <span class="hljs-keyword">return</span> chart;<br><br></code></pre></td></tr></table></figure><p>3.定义一个方法来获取return需要渲染的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getOption1</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">var</span> option1 = &#123;<br>     <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&quot;#ffffff&quot;</span>,<br>     <span class="hljs-attr">title</span>: &#123;<br>       <span class="hljs-attr">subtext</span>: <span class="hljs-string">&#x27;下拉刷新获取最新数据&#x27;</span><br>     &#125;,<br>     <span class="hljs-attr">series</span>: [&#123;<br>       <span class="hljs-attr">label</span>: &#123;<br>         <span class="hljs-attr">normal</span>: &#123;<br>           <span class="hljs-attr">fontSize</span>: <span class="hljs-number">14</span><br>         &#125;<br>       &#125;,<br>       <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;pie&#x27;</span>,<br>       <span class="hljs-attr">center</span>: [<span class="hljs-string">&#x27;50%&#x27;</span>, <span class="hljs-string">&#x27;50%&#x27;</span>],<br>       <span class="hljs-attr">radius</span>: [<span class="hljs-string">&#x27;35%&#x27;</span>, <span class="hljs-string">&#x27;55%&#x27;</span>],<br>       <span class="hljs-attr">data</span>: app.<span class="hljs-property">globalData</span>.<span class="hljs-property">pie</span>,<br>       <span class="hljs-attr">emphasis</span>: &#123;<br>         <span class="hljs-attr">itemStyle</span>: &#123;<br>           <span class="hljs-attr">shadowBlur</span>: <span class="hljs-number">10</span>,<br>           <span class="hljs-attr">shadowOffsetX</span>: <span class="hljs-number">0</span>,<br>           <span class="hljs-attr">shadowColor</span>: <span class="hljs-string">&#x27;rgba(0, 0, 0, 0.5)&#x27;</span><br>         &#125;<br>       &#125;<br>     &#125;]<br>   &#125;;<br>   <span class="hljs-keyword">return</span> option1<br> &#125;<br></code></pre></td></tr></table></figure><p>4.接下来初始化数据，初始化数据和第二次渲染方法分开写，在进入页面时在onload中获取echarts的id</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">echartsComponnet1</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">selectComponent</span>(<span class="hljs-string">&#x27;#mychart-dom-pie&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">init_echarts1</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">echartsComponnet1</span>.<span class="hljs-title function_">init</span>(<span class="hljs-function">(<span class="hljs-params">canvas, width, height</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 初始化图表</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Chart</span> = echarts.<span class="hljs-title function_">init</span>(canvas, <span class="hljs-literal">null</span>, &#123;<br>      <span class="hljs-attr">width</span>: width,<br>      <span class="hljs-attr">height</span>: height<br>    &#125;);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setOption1</span>(<span class="hljs-title class_">Chart</span>)<br>    <span class="hljs-comment">// 注意这里一定要返回 chart 实例，否则会影响事件处理等</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Chart</span>;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">setOption1</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">Chart1</span>) &#123;<br>    <span class="hljs-title class_">Chart1</span>.<span class="hljs-title function_">clear</span>(); <span class="hljs-comment">// 清除</span><br>    <span class="hljs-title class_">Chart1</span>.<span class="hljs-title function_">setOption</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getOption1</span>()); <span class="hljs-comment">//获取新数据</span><br> &#125;<br></code></pre></td></tr></table></figure><p>5.动态加载时调用二次加载图标的方法就行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.请求的数据先行（request保存数据没什么好说的）&lt;br&gt;2.在最外层定义charts实例为空，ec绑定data外方法&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="小程序" scheme="http://example.com/salty.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>配音圈配音</title>
    <link href="http://example.com/salty.github.io/2022/08/02/%E9%85%8D%E9%9F%B3%E5%9C%88%E9%85%8D%E9%9F%B3%E5%80%BC%E5%BE%97%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <id>http://example.com/salty.github.io/2022/08/02/%E9%85%8D%E9%9F%B3%E5%9C%88%E9%85%8D%E9%9F%B3%E5%80%BC%E5%BE%97%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%9C%B0%E6%96%B9/</id>
    <published>2022-08-01T16:00:00.000Z</published>
    <updated>2023-03-24T06:52:24.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="配音圈配音的模块化"><a href="#配音圈配音的模块化" class="headerlink" title="配音圈配音的模块化"></a>配音圈配音的模块化</h2><p>ES6的Class 类<br>    在传统的<code>js</code>语法当中，如果我们想创建一个实例对象的时候一般会先定义一个构造函数，然后通过<code>new</code>运算符来创建一个实例对象，例如: </p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name,age</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">showName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">showAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;xz&#x27;</span>,<span class="hljs-number">21</span>)<br>person.<span class="hljs-title function_">showName</span>()<span class="hljs-comment">//&#x27;xz&#x27;</span><br>person.<span class="hljs-title function_">showAge</span>()<span class="hljs-comment">//21</span><br></code></pre></td></tr></table></figure></li></ul><p>我们定义一个<code>Person</code>的构造函数，然后通过<code>new Person()</code>来创建一个实例对象。一般我们向构造函数的原型上添加方法，表示实例要继承的方法，这个方法是公共的，不是某个实例自己特有的方法。这样我们就可以完成一个具体的实例了。<br>而在<code>ES6</code>中，为我们提供了一个叫<code>Class</code>的一个方法,让我们能够更容易理解和创建一个实例对象。例如： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>    &#125;<br>    <span class="hljs-title function_">showName</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//为我们的实例添加继承的方法</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    &#125;<br>    <span class="hljs-title function_">showAge</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//为我们的实例添加继承的方法</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;xz&#x27;</span>,<span class="hljs-number">21</span>)<br>person.<span class="hljs-title function_">showName</span>()<span class="hljs-comment">//&#x27;xz&#x27;</span><br>person.<span class="hljs-title function_">showAge</span>()<span class="hljs-comment">//21</span><br></code></pre></td></tr></table></figure><p>注意： </p><pre><code>     -  如果使用es6的class类语法要注意一点就是 `constructor`方法是类默认方法，通过`new`命令生成对象实例时自动调用该方法。一个类必须有一个`constructor`方法，如果没有显示定义，那么一个空的`constructor`方法会被默认添加。      -  类的声明不存在变量提升 </code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<span class="hljs-comment">//报错，因为类的声明不存在变量提升</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;xz&#x27;</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">21</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>js类的继承<br>根据ES6的语法，super关键字，extends来进行类的继承操作<br>我们可以通过<code>extends</code>关键字来实现子类对父类的继承。子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建的实例会报错。原因在于子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后进行加工，如果不调用<code>super</code>关键字，那么子类就拿不到<code>this</code>对象，而<code>super</code>在其中表示的其实是父类的构造函数 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">sup</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;&#125;<br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//向父类的原型上挂载show()方法</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;sup&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">sup</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">super</span>()<br>    &#125;<br>    <span class="hljs-title function_">showinfo</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">super</span>.<span class="hljs-title function_">show</span>())<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title function_">sub</span>()<br>obj.<span class="hljs-title function_">showinfo</span>()<span class="hljs-comment">//sup</span><br></code></pre></td></tr></table></figure><p>配音圈配音的utils里有6个文件,模块化的大致思路是一样的。举例： </p><ul><li><p>config.js </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br><br>    &#125;<br>&#125;<br><span class="hljs-title class_">Config</span>.<span class="hljs-property">restUrl</span> = <span class="hljs-string">&#x27;https://dub.wuhanzhuangxiu01.cn&#x27;</span>;<br><span class="hljs-title class_">Config</span>.<span class="hljs-property">onPay</span> = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//是否启用支付</span><br>........<br><br><span class="hljs-keyword">export</span> &#123;<span class="hljs-title class_">Config</span>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>base.js </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  自定义基类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">Config</span><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config.js&#x27;</span>;<br><br><span class="hljs-keyword">var</span> app = <span class="hljs-title function_">getApp</span>();<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">baseRequestUrl</span> = <span class="hljs-title class_">Config</span>.<span class="hljs-property">restUrl</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 封装request请求</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">request</span>(<span class="hljs-params">params, noRefetch</span>) &#123;<br>    <span class="hljs-keyword">var</span> url = <span class="hljs-variable language_">this</span>.<span class="hljs-property">baseRequestUrl</span> + params.<span class="hljs-property">url</span>;<br>    <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;<br><br>    <span class="hljs-comment">/* 判断请求方式 默认为&#x27;POST&#x27; */</span><br>    <span class="hljs-keyword">if</span> (!params.<span class="hljs-property">type</span>) &#123;<br>      params.<span class="hljs-property">type</span> = <span class="hljs-string">&#x27;POST&#x27;</span>;<br>    &#125;<br><br>    wx.<span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: url,<br>      <span class="hljs-attr">data</span>: params.<span class="hljs-property">data</span>,<br>      <span class="hljs-attr">header</span>: &#123;<br>        <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>        <span class="hljs-string">&#x27;token&#x27;</span>: wx.<span class="hljs-title function_">getStorageSync</span>(<span class="hljs-string">&#x27;token&#x27;</span>),<br>      &#125;,<br>      <span class="hljs-attr">method</span>: params.<span class="hljs-property">type</span>,<br>      <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>      <span class="hljs-attr">responseType</span>: <span class="hljs-string">&#x27;text&#x27;</span>,<br>      <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-comment">// res.data.param.disable == 1? wx.setStorageSync(&#x27;disable&#x27;, 1): wx.setStorageSync(&#x27;disable&#x27;, 0);</span><br>        <span class="hljs-keyword">var</span> code = res.<span class="hljs-property">statusCode</span>.<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-keyword">var</span> startChar = code.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (startChar == <span class="hljs-string">&#x27;2&#x27;</span>) &#123;<br><br>          params.<span class="hljs-property">sCallback</span> &amp;&amp; params.<span class="hljs-title function_">sCallback</span>(res.<span class="hljs-property">data</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          that.<span class="hljs-title function_">_processError</span>(res);<br>          params.<span class="hljs-property">eCallback</span> &amp;&amp; params.<span class="hljs-title function_">eCallback</span>(res.<span class="hljs-property">data</span>);<br>        &#125;<br>      &#125;,<br>      <span class="hljs-attr">fail</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br><br>        that.<span class="hljs-title function_">_processError</span>(res);<br>      &#125;,<br>    &#125;)<br>  &#125;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 消息提示</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">showToast</span>(<span class="hljs-params">title, icon</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!icon) &#123;<br>      icon = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    &#125;<br>    wx.<span class="hljs-title function_">showToast</span>(&#123;<br>      <span class="hljs-attr">title</span>: title,<br>      <span class="hljs-attr">icon</span>: icon,<br>      <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>,<br>    &#125;)<br>  &#125;<br>  ........<br>&#125;<br><br><span class="hljs-keyword">export</span> &#123;<br>  <span class="hljs-title class_">Base</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>public.js </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Home</span><br><span class="hljs-comment"> * 自定义类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> &#123;<br>    <span class="hljs-title class_">Base</span><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../utils/base.js&#x27;</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Public</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Base</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">/* 必须: 调用基类的构造函数 */</span><br>        <span class="hljs-variable language_">super</span>();<br>    &#125;<br>    <span class="hljs-comment">/**获取金牌推荐 */</span><br>    <span class="hljs-title function_">gold_recommend</span>(<span class="hljs-params">data, callback</span>) &#123;<br>        <span class="hljs-keyword">var</span> params = &#123;<br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/gold_list&#x27;</span>,<br>            <span class="hljs-attr">data</span>: data,<br>            <span class="hljs-attr">sCallback</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>                callback &amp;&amp; <span class="hljs-title function_">callback</span>(res);<br>            &#125;,<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">request</span>(params);<br>    &#125;<br>   ........<br>&#125;<br><br><span class="hljs-comment">/* 输出类HOME */</span><br><span class="hljs-keyword">export</span> &#123;<br>    <span class="hljs-title class_">Public</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>使用 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;<br>  <span class="hljs-title class_">Public</span><br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../tpls/public.js&#x27;</span>;<br><span class="hljs-keyword">var</span> pub = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Public</span>();<br><span class="hljs-title class_">Page</span>(&#123;<br>    <span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>)&#123;<br>        pub.<span class="hljs-title function_">gold_recommend</span>(&#123;<br>            <span class="hljs-string">&#x27;page&#x27;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&#x27;limit&#x27;</span>: <span class="hljs-number">5</span><br>        &#125;, <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> == <span class="hljs-number">200</span>) &#123;<br>                that.<span class="hljs-title function_">setData</span>(&#123;<br>                    <span class="hljs-title class_">GlodList</span>: res.<span class="hljs-property">data</span><br>                &#125;)<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h2><p>小程序的生命周期 </p><ul><li><img src="https://img-blog.csdnimg.cn/1be945800a77490089f3acd4baa11683.jpeg#id=m6BIy&originHeight=547&originWidth=1297&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>onReady 生命周期函数–监听页面初次渲染完成<br>onShow 生命周期函数–监听页面显示<br>onHide 生命周期函数–监听页面隐藏<br>onUnload 生命周期函数–监听页面卸载<br>onPullDownRefresh 页面相关事件处理函数–监听用户下拉动作<br>onReachBottom 页面上拉触底事件的处理函数<br>onShareAppMessage 用户点击右上角转发<br>onPageScroll 页面滚动触发事件的处理函数<br>onTabItemTap 当前是 tab 页时，点击 tab 时触发</li></ul><p>配音圈配音因为是用原生微信小程序进行编写的，没有watch，没有vuex,所以看似很简单的方式就很难实现。就比如进入到小程序里面先进行登录获取头像以及openid,在通过拿到的openid进行身份判断。这里的身份判断要在首页里展示，所以写在首页的onload里，而登录这个东西最早用，并且很多地方用。所以写在小程序的onlaunch函数里。但是因为onlaunch里执行的登录获取openid是个请求，有异步效果。所以在小程序执行完页面的生命周期函数的时候，可能还没有拿到openid。而配音圈配音通过一个回调函数解决了这个问题。<br>总结来说就是微信小程序app.js的onLaunch中的异步请求执行完之后再执行Page的onLoad<br><strong>app.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">App</span>(&#123;<br>  <span class="hljs-attr">globalData</span>: &#123;<br>    <span class="hljs-attr">employ</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-attr">onLaunchData</span>: <span class="hljs-literal">null</span>,<br>  &#125;,<br>  <span class="hljs-attr">onLaunch</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;onlaunch&quot;</span>);<br>    <span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span>;<br>    wx.<span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://101.35.96.100:8001/miniprograms/tideForecast/getAreaList&#x27;</span>,<br>      <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>      <span class="hljs-attr">data</span>: &#123;&#125;,<br>      <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>        <span class="hljs-comment">//设置请求的值</span><br>        that.<span class="hljs-property">globalData</span>.<span class="hljs-property">onLaunchData</span> = res.<span class="hljs-property">data</span>.<span class="hljs-property">data</span><br>        <span class="hljs-comment">//设置请求状态</span><br>        that.<span class="hljs-property">globalData</span>.<span class="hljs-property">employ</span> = <span class="hljs-literal">true</span>;<br>       <span class="hljs-comment">//由于这里是网络请求，可能会在 Page.onLoad 之后才返回  在onLoad中定义下app.employCallback 后才执行下述that.employCallback(true)，此时用户数据肯定得到了，回调内再则可获取到用户数据</span><br>       <span class="hljs-comment">//所以此处加入 callback 以防止这种情况</span><br>        <span class="hljs-keyword">if</span> (that.<span class="hljs-property">employCallback</span>) &#123;<br>          that.<span class="hljs-title function_">employCallback</span>(<span class="hljs-literal">true</span>);<br>        &#125;<br>      &#125;,<br>    &#125;);<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">getApp</span>()<br><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">onLaunchData</span>:<span class="hljs-literal">null</span>,<br>  &#125;,<br>  <span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-keyword">let</span> that = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;onload&quot;</span>);<br>    <span class="hljs-keyword">if</span> (app.<span class="hljs-property">globalData</span>.<span class="hljs-property">employ</span> &amp;&amp; app.<span class="hljs-property">globalData</span>.<span class="hljs-property">employ</span> != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;first&quot;</span>)<br>      <span class="hljs-keyword">let</span> onLaunchData = app.<span class="hljs-property">globalData</span>.<span class="hljs-property">onLaunchData</span>;<br>      that.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">onLaunchData</span>: onLaunchData ? onLaunchData : <span class="hljs-literal">null</span><br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 由于 onLaunch里执行的 是网络请求，可能会在 Page.onLoad 之后才返回</span><br>      <span class="hljs-comment">// 所以此处加入 callback 以防止这种情况</span><br>      app.<span class="hljs-property">employCallback</span> = <span class="hljs-function"><span class="hljs-params">employ</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;进入到app.employCallback&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(that);<br>        <span class="hljs-keyword">if</span> (employ != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(employ);<br>          that.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">onLaunchData</span>: app.<span class="hljs-property">globalData</span>.<span class="hljs-property">onLaunchData</span><br>          &#125;);         <br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>这里执行的流程是当微信小程序运行时，首先进入到了onLaunch进行执行，因为onLaunch里面有request是异步请求，所以压力来到了index.js的onload里面，在onload里去判断app.js里的数据状态是什么样的，是true就拿request里的数据，如果没有就对app,js的app对象进行添加一个回调函数属性，在这个回调函数属性里需要传入一个true就能操作index.js的page对象里的data,给onlaunch里请求的值赋值给index.js的page对象里的data。这个时候因为之前在onLaunch写的调用自己的在index.js里写的回调，并传入true,对index.js中data中的数据进行赋值。 </p><h2 id="h5上传文件模块"><a href="#h5上传文件模块" class="headerlink" title="h5上传文件模块"></a>h5上传文件模块</h2><p>参考资料<br><a href="https://blog.csdn.net/m0_37792384/article/details/115952370">Uniapp 内嵌H5跳转内嵌小程序页面</a><br><a href="https://blog.csdn.net/rxh13543515695/article/details/124980667">uniapp h5项目点击跳转小程序，h5传参到小程序</a><br><a href="https://blog.csdn.net/m0_56712653/article/details/117741481">微信小程序与h5通过web-view传值</a><br><a href="https://developers.weixin.qq.com/community/develop/article/doc/000a0ce2858618976b0a2df3b5bc13">[填坑手册]小程序web-view组件实战与踩坑</a><br>首先因为微信小程序无法打开本地资源管理器。所以都是通过微信的<code>wx.chooseMessageFile</code>进行在本地聊天记录中选取文件。（这种方法也是目前大部分小程序采取上传文件的方式优点是：速度快、兼容性好。缺点：用户需要提前把文件发送给自己聊天列表中的随便一个人）<br><code>wx.chooseMessageFile</code>代码实现 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">wx.<span class="hljs-title function_">chooseMessageFile</span>(&#123;<br>  <span class="hljs-attr">count</span>: <span class="hljs-number">10</span>,<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-comment">//选择了除图片和视频的文件</span><br>  success (res) &#123;<br>    <span class="hljs-comment">// tempFilePath可以作为 img 标签的 src 属性显示图片</span><br>    <span class="hljs-keyword">const</span> tempFilePaths = res.<span class="hljs-property">tempFiles</span><br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>现在需要直接通过微信小程序去访问本地的资源管理器。我的解决思路的是，通过微信小程序使用webview去调用一个h5页面。在通过h5页面去调用本地资源。选取后将资源上传服务器，在返回到小程序。这里比较困难的是小程序向webview传值以及webview跳回小程序，以及返回参数到小程序。<br>这里首先需要写一个h5的页面进行上传文件,这里需要引入小程序的一个sdk,uniapp使用 <code>npm install --save-dev weixin-js-sdk</code>。然后在main.js里进行全局引入<code>let jweixin = require(&#39;jweixin-module&#39;)</code> <code>Vue.prototype.$wx = jweixin</code>。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;view class=&quot;content&quot;&gt;<br>    &lt;view class=&quot;add-btn&quot;&gt;<br>      &lt;text class=&quot;text&quot; @click=&quot;openFile&quot;&gt;添加附件&lt;/text&gt;<br>    &lt;/view&gt;<br>  &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  import wx from &#x27;@/static/activity_sdk.js&#x27;;<br>  export default &#123;<br>    data() &#123;<br>      return &#123;<br>        title: &#x27;Hello&#x27;,<br>        id: &#x27;&#x27;,<br>        token: &#x27;&#x27;<br>      &#125;<br>    &#125;,<br>    methods: &#123;<br>      // 打开文件选择器<br>      openFile() &#123;<br>        let that = this<br>        uni.chooseFile(&#123;<br>          count: 1, //默认100<br>          extension: [&#x27;.mp3&#x27;, &#x27;.m4a&#x27;],<br>          success: (res) =&gt; &#123;<br>            console.log(res);<br>            if (res.tempFiles[0].size / 1024 / 1024 &gt; 20) &#123;<br>              that.$refs.uToast.show(&#123;<br>                title: &#x27;附件大小不能超过20M&#x27;,<br>                type: &#x27;warning&#x27;,<br>              &#125;)<br>              return;<br>            &#125;<br>            var params = &#123;<br>              path: res.tempFilePaths[0],<br>              name: res.tempFiles[0].name,<br>              orderid: 0,<br>            &#125;<br>            that.uploadFile(params);<br>          &#125;<br>        &#125;);<br>      &#125;,<br><br>      uploadFile(params, noRefetch) &#123;<br>        uni.showLoading(&#123;<br>          title: &#x27;上传中...&#x27;,<br>        &#125;);<br>        var that = this;<br>        var url = &#x27;https://dub.wuhanzhuangxiu01.cn/uploadMusic&#x27;;<br>        var name = params.name ? params.name : &#x27;&#x27;;<br>        var key = params.key ? params.key : &#x27;&#x27;;<br>        var ii = params.ii ? params.ii : 0;<br>        var orderid = params.orderid ? params.orderid : 0;<br>        var id = that.id ? that.id : 0;<br>        uni.uploadFile(&#123;<br>          url: url,<br>          filePath: params.path,<br>          fileType: &#x27;audio&#x27;,<br>          name: &#x27;file&#x27;,<br>          header: &#123;<br>            &#x27;token&#x27;: that.token,<br>          &#125;,<br>          formData: &#123;<br>            &#x27;path&#x27;: params.path,<br>            &#x27;name&#x27;: name,<br>            &#x27;key&#x27;: key,<br>            &#x27;ii&#x27;: ii,<br>            &#x27;uid&#x27;: id,<br>            &#x27;orderid&#x27;: orderid<br>          &#125;,<br>          success: function(res) &#123;<br>            var data = JSON.parse(res.data);<br>            uni.hideLoading();<br>            that.$wx.miniProgram.postMessage(&#123;<br>              data: &#123;<br>                name: data,<br>              &#125;<br>            &#125;);<br>            that.$wx.miniProgram.navigateBack(&#123;<br>              delta: 1<br>            &#125;)<br>          &#125;,<br>          fail: function(res) &#123;<br>            console.log(&#x27;fail:&#x27;, res);<br>            uni.hideLoading();<br>            uni.showLoading(&#123;<br>              title: &#x27;上传失败&#x27;,<br>              icon: &#x27;error&#x27;<br>            &#125;);<br>            that.$wx.miniProgram.navigateBack(&#123;<br>              delta: 1<br>            &#125;)<br>          &#125;,<br>        &#125;)<br>      &#125;,<br>    &#125;,<br>    onLoad(e) &#123;<br>      console.log(&#x27;h5页面&#x27;, e);<br>      this.id = e.id<br>      this.token = e.token<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>  .add-btn &#123;<br>    width: 100%;<br>    height: 100vh;<br>    display: flex;<br>    justify-content: center;<br>    align-items: center;<br><br>  &#125;<br><br>  .add-btn text &#123;<br>    display: block;<br>    text-align: center;<br>    line-height: 100rpx;<br>    width: 80%;<br>    height: 100rpx;<br>    background-color: cadetblue;<br>    border-radius: 20rpx;<br>    /* margin: 0 auto; */<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>这里从webview的网页跳回小程序有个问题。就是只能用<code>navigateBack</code>进行返回。文档上说的是navigateTo、navigateBack、switchTab、reLaunch、redirectTo都能使用，但是在我的环境下只能使用<code>navigateBack</code>进行返回。传值我是通过webview的bindmessage属性进行传值。首先在webview定义好属性写好回调。在h5页面，使用wx.miniProgram.postMessage来进行传值。传的值会在 bindmessage定义好的函数里形参里。<br>因为之前我是使用 <code>navigateBack</code>进行返回的。所以返回的值一直在webview页面。我需要传值给我的返回的这个界面。我在app.js里面定义一个属性进行页面之间的通信。在webview页面接受传回来的值，存放在app.js上面的属性。在跳转的页面进行拿取传过来的值。就能完成从webview传值给微信小程序。<br>微信小程序webview示例代码： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;view class=&quot;content&quot;&gt;<br>    &lt;view class=&quot;add-btn&quot;&gt;<br>      &lt;text class=&quot;text&quot; @click=&quot;openFile&quot;&gt;添加附件&lt;/text&gt;<br>    &lt;/view&gt;<br>  &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  import wx from &#x27;@/static/activity_sdk.js&#x27;;<br>  export default &#123;<br>    data() &#123;<br>      return &#123;<br>        title: &#x27;Hello&#x27;,<br>        id: &#x27;&#x27;,<br>        token: &#x27;&#x27;<br>      &#125;<br>    &#125;,<br>    methods: &#123;<br>      // 打开文件选择器<br>      openFile() &#123;<br>        let that = this<br>        uni.chooseFile(&#123;<br>          count: 1, //默认100<br>          extension: [&#x27;.mp3&#x27;, &#x27;.m4a&#x27;],<br>          success: (res) =&gt; &#123;<br>            console.log(res);<br>            if (res.tempFiles[0].size / 1024 / 1024 &gt; 20) &#123;<br>              that.$refs.uToast.show(&#123;<br>                title: &#x27;附件大小不能超过20M&#x27;,<br>                type: &#x27;warning&#x27;,<br>              &#125;)<br>              return;<br>            &#125;<br>            var params = &#123;<br>              path: res.tempFilePaths[0],<br>              name: res.tempFiles[0].name,<br>              orderid: 0,<br>            &#125;<br>            that.uploadFile(params);<br>          &#125;<br>        &#125;);<br>      &#125;,<br><br>      uploadFile(params, noRefetch) &#123;<br>        uni.showLoading(&#123;<br>          title: &#x27;上传中...&#x27;,<br>        &#125;);<br>        var that = this;<br>        var url = &#x27;https://dub.wuhanzhuangxiu01.cn/uploadMusic&#x27;;<br>        var name = params.name ? params.name : &#x27;&#x27;;<br>        var key = params.key ? params.key : &#x27;&#x27;;<br>        var ii = params.ii ? params.ii : 0;<br>        var orderid = params.orderid ? params.orderid : 0;<br>        var id = that.id ? that.id : 0;<br>        uni.uploadFile(&#123;<br>          url: url,<br>          filePath: params.path,<br>          fileType: &#x27;audio&#x27;,<br>          name: &#x27;file&#x27;,<br>          header: &#123;<br>            &#x27;token&#x27;: that.token,<br>          &#125;,<br>          formData: &#123;<br>            &#x27;path&#x27;: params.path,<br>            &#x27;name&#x27;: name,<br>            &#x27;key&#x27;: key,<br>            &#x27;ii&#x27;: ii,<br>            &#x27;uid&#x27;: id,<br>            &#x27;orderid&#x27;: orderid<br>          &#125;,<br>          success: function(res) &#123;<br>            var data = JSON.parse(res.data);<br>            uni.hideLoading();<br>            that.$wx.miniProgram.postMessage(&#123;<br>              data: &#123;<br>                name: data,<br>              &#125;<br>            &#125;);<br>            that.$wx.miniProgram.navigateBack(&#123;<br>              delta: 1<br>            &#125;)<br>          &#125;,<br>          fail: function(res) &#123;<br>            console.log(&#x27;fail:&#x27;, res);<br>            uni.hideLoading();<br>            uni.showLoading(&#123;<br>              title: &#x27;上传失败&#x27;,<br>              icon: &#x27;error&#x27;<br>            &#125;);<br>            that.$wx.miniProgram.navigateBack(&#123;<br>              delta: 1<br>            &#125;)<br>          &#125;,<br>        &#125;)<br>      &#125;,<br>    &#125;,<br>    onLoad(e) &#123;<br>      console.log(&#x27;h5页面&#x27;, e);<br>      this.id = e.id<br>      this.token = e.token<br>    &#125;<br>  &#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>  .add-btn &#123;<br>    width: 100%;<br>    height: 100vh;<br>    display: flex;<br>    justify-content: center;<br>    align-items: center;<br><br>  &#125;<br><br>  .add-btn text &#123;<br>    display: block;<br>    text-align: center;<br>    line-height: 100rpx;<br>    width: 80%;<br>    height: 100rpx;<br>    background-color: cadetblue;<br>    border-radius: 20rpx;<br>    /* margin: 0 auto; */<br>  &#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>这部分代码中的wxml部分，src部分写的很复杂。只有这么写，才能带参数，访问这个h5页面。之前我是先将url合并之后一块给src,但是这个h5会在链接自动生成<code>#</code>在路径里。然后微信这边会自动将#号过滤掉。这个#号是因为路由器的两种工作模式之一的hash模式造成的。    </p><p>详解可见 <a href="https://blog.csdn.net/qq_37109041/article/details/118962254">Uniapp发布为H5版本时如何隐藏访问路径的#符号</a> </p><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><ul><li><p><strong>所有函数都有一个特别的属性：</strong><code>**prototype**</code>** : 显式原型属性** </p><ul><li>每个函数都有一个prototype属性, 它默认指向一个Object空对象 </li><li>原型对象中有一个属性constructor, 它指向函数对象<br><img src="https://img-blog.csdnimg.cn/9c55148087e34260b59b490c83f4f8ff.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5qmY5a2Q55qE5b-D6ISP,size_19,color_FFFFFF,t_70,g_se,x_16#id=wMSbE&originHeight=262&originWidth=626&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="> </li><li>作用: 函数的所有实例对象自动拥有原型中的属性(方法) <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//fun的prototype默认指向一个Object空对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fun</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <br><span class="hljs-comment">// 原型对象中有一个属性constructor, 它指向函数对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fun</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> == <span class="hljs-title class_">Fun</span>)<br><br><span class="hljs-title class_">Fun</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">test</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是Fun原型上的一个方法&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">let</span> fun = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fun</span>()<br><span class="hljs-comment">// 给原型对象添加的属性 ==&gt; 实例对象可以访问</span><br>fun.<span class="hljs-title function_">test</span>()<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>所有实例对象都有一个特别的属性:</strong><code>**__proto__**</code>** : 隐式原型属性** </p><ul><li>对象的隐式原型的值为其对应构造函数的显式原型的值 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fun</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;<br><span class="hljs-keyword">let</span> fun = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fun</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fun</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> === fun.<span class="hljs-property">__proto__</span>)<br><span class="hljs-comment">// 返回结果是true</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p>在<code>function Fun()&#123;&#125;</code>就相当于在内部 <code>this.prototype = &#123;&#125;</code><br>在<code>let fun = new Fun()</code>就相当于在内部 <code>this.__proto__ = Fn.prototype</code> </p><ul><li><strong>显示原型与隐式原型在堆和栈上的结构图</strong> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-property">__proto__</span>===<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://img-blog.csdnimg.cn/234a2f3e7aa7427293295b2c04bc6895.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5qmY5a2Q55qE5b-D6ISP,size_20,color_FFFFFF,t_70,g_se,x_16#id=FnOXR&originHeight=574&originWidth=869&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="> </p><ul><li><strong>原型链</strong><br>所有的实例对象都有<code>__proto__</code>属性, 它指向的就是原型对象。这样通过<code>__proto__</code>属性就形成了一个链的结构—-&gt;原型链 <ol><li>当查找对象内部的属性&#x2F;方法时, js引擎自动沿着这个原型链查找 </li><li>当给对象属性赋值时不会使用原型链, 而只是在当前对象中进行操作 </li><li>别名: 隐式原型链 </li><li>作用: 查找对象的属性(方法)</li></ol></li></ul><p>代码 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fn</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">test1</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;test1()&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">test2</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;test2()&quot;</span>)<br>&#125;<br><span class="hljs-keyword">let</span> fn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fn</span>()<br>fn.<span class="hljs-title function_">test1</span>()<br>fn.<span class="hljs-title function_">test2</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fn.<span class="hljs-title function_">toString</span>());<br>fn.<span class="hljs-title function_">test3</span>()<br></code></pre></td></tr></table></figure><p>图解<img src="https://www.giaott.com/images/2022/08/24/Ovkdd.png#id=eigmY&originHeight=640&originWidth=1144&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p><ul><li><strong>注意：</strong> <ol><li><p>函数的显示原型指向的对象默认是空Object实例对象(但Object不满足) </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Fn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>所有函数都是Function的实例(包含Function)</p></li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Function</span>.<span class="hljs-property">__proto__</span>===<span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)<span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><ol start="3"><li>Object的原型对象是原型链尽头 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span>) <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;配音圈配音的模块化&quot;&gt;&lt;a href=&quot;#配音圈配音的模块化&quot; class=&quot;headerlink&quot; title=&quot;配音圈配音的模块化&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="小程序" scheme="http://example.com/salty.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>大小缩放轮播</title>
    <link href="http://example.com/salty.github.io/2022/05/05/%E5%A4%A7%E5%B0%8F%E7%BC%A9%E6%94%BE%E8%BD%AE%E6%92%AD/"/>
    <id>http://example.com/salty.github.io/2022/05/05/%E5%A4%A7%E5%B0%8F%E7%BC%A9%E6%94%BE%E8%BD%AE%E6%92%AD/</id>
    <published>2022-05-04T16:00:00.000Z</published>
    <updated>2023-03-24T06:50:57.259Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;block&gt;<br>&lt;swiper class=&quot;swiper-block&quot; :autoplay=&quot;false&quot; :circular=&quot;true&quot; previous-margin=&quot;90rpx&quot; next-margin=&quot;90rpx&quot;<br>current=&quot;0&quot; @change=&quot;swiperChange&quot;&gt;<br>&lt;block v-for=&quot;(item, index) in swiperImgUrls&quot; :key=&quot;index&quot;&gt;<br>&lt;swiper-item class=&quot;swiper-item&quot;&gt;<br>&lt;image mode=&quot;aspectFill&quot; :src=&quot;item&quot;<br>:class=&quot;&#x27;slide-image &#x27; + (swiperIndex == index ? &#x27;active&#x27; : &#x27;&#x27;)&quot; /&gt;<br>&lt;/swiper-item&gt;<br>&lt;/block&gt;<br>&lt;/swiper&gt;<br>&lt;/block&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>// index.js<br>// 获取应用实例<br>const app = getApp();<br>export default &#123;<br>data() &#123;<br>return &#123;<br>swiperImgUrls: [<br>&#x27;https://vkceyugu.cdn.bspapp.com/VKCEYUGU-f184e7c3-1912-41b2-b81f-435d1b37c7b4/1ae87107-2943-4ba6-be2b-390ca27c6260.png&#x27;,<br>&#x27;https://vkceyugu.cdn.bspapp.com/VKCEYUGU-f184e7c3-1912-41b2-b81f-435d1b37c7b4/1ae87107-2943-4ba6-be2b-390ca27c6260.png&#x27;,<br>&#x27;https://vkceyugu.cdn.bspapp.com/VKCEYUGU-f184e7c3-1912-41b2-b81f-435d1b37c7b4/1ae87107-2943-4ba6-be2b-390ca27c6260.png&#x27;<br>],<br>swiperIndex: 0<br>&#125;;<br>&#125;,<br>onLoad: function(options) &#123;&#125;,<br>methods: &#123;<br>swiperChange(e) &#123;<br>const that = this;<br>that.swiperIndex = e.detail.current<br>&#125;<br>&#125;<br>&#125;;<br>&lt;/script&gt;<br>&lt;style&gt;<br>.swiper-block &#123;<br>height: 300rpx;<br>width: 100%;<br>&#125;<br><br>.swiper-item &#123;<br>display: flex;<br>flex-direction: column;<br>justify-content: center;<br>align-items: flex-start;<br>overflow: unset;<br>&#125;<br><br>.slide-image &#123;<br>height: 250rpx;<br>width: 520rpx;<br>border-radius: 9rpx;<br>box-shadow: 0px 0px 30rpx rgba(0, 0, 0, 0.2);<br>margin: 0rpx 30rpx;<br>z-index: 1;<br>&#125;<br><br>.active &#123;<br>transform: scale(1.14);<br>transition: all 0.2s ease-in 0s;<br>z-index: 20;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="vue" scheme="http://example.com/salty.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>优雅的响应式数据</title>
    <link href="http://example.com/salty.github.io/2022/02/02/%E4%BC%98%E9%9B%85%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/salty.github.io/2022/02/02/%E4%BC%98%E9%9B%85%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE/</id>
    <published>2022-02-01T16:00:00.000Z</published>
    <updated>2023-03-24T06:55:19.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty"></a>defineProperty</h1><p>这个obj上的方法可以用来修改指定的对象属性的值<br><strong>语法：Object.defineProperty(obj,property,descriptor)</strong></p><p><strong>参数一：obj</strong><br>绑定属性的目标对象<br><strong>参数二：property</strong><br>绑定的属性名<br><strong>参数三：descriptor</strong><br>属性描述（配置），且此参数本身为一个对象</p><p><em>属性值1：value</em><br><em>设置属性默认值</em><br><em>属性值2：writable</em><br><em>设置属性是否能够修改</em><br><em>属性值3：enumerable</em><br><em>设置属性是否可以枚举，即是否允许遍历</em><br><em>属性值4：configurable</em><br><em>设置属性是否可以删除或编辑</em><br><em>属性值5：get</em><br><em>获取属性的值</em><br><em>属性值6：set</em><br><em>设置属性的值</em></p><p>先定义一个这个玩意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vue">var obj = &#123;<br>count : 0,<br>list : [1,2,4]<br>&#125;<br>var target = &#123;&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="通过value设置属性值"><a href="#通过value设置属性值" class="headerlink" title="通过value设置属性值"></a>通过value设置属性值</h3><p>由于Object.defineProperty可以给对象定义属性，我们通过value，可以动态地将obj对象的属性动态地添加给target中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">  for (let key in obj)&#123;<br>Object.defineProperty(target,key,&#123;<br>value: obj[key]<br>&#125;)<br>&#125;<br>console.log(target);<br><br></code></pre></td></tr></table></figure><h3 id="通过get方法获取属性的值"><a href="#通过get方法获取属性的值" class="headerlink" title="通过get方法获取属性的值"></a>通过get方法获取属性的值</h3><p><strong>【注意!】当设置get方法时，不能有value和writable方法，否则会报错</strong><br>get方法的值是一个函数，此函数不需要参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs vue">  for (let key in obj)&#123;<br>Object.defineProperty(target,key,&#123;<br>//value: obj[key],<br>//writable:true,<br>enumerable: false,<br>configurable: true,<br>get: function()&#123;<br>return obj[key]<br>&#125;<br>&#125;)<br>&#125;<br>console.log(target.count);<br></code></pre></td></tr></table></figure><h3 id="通过set方法设置属性的值"><a href="#通过set方法设置属性的值" class="headerlink" title="通过set方法设置属性的值"></a>通过set方法设置属性的值</h3><p>set方法的值也是一个函数，定义时会自动注入一个参数，此参数会设置属性的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">  for (let key in obj)&#123;<br>Object.defineProperty(target,key,&#123;<br>//value: obj[key],<br>//writable:true,<br>enumerable: false,<br>configurable: true,<br>get: function()&#123;<br>return obj[key]<br>&#125;，<br>set: function(val)&#123;<br>console.log(val);//打印设置好的值<br>&#125;<br>&#125;)<br>&#125;<br>target.count = 10;//修改count属性的值为10<br></code></pre></td></tr></table></figure><h1 id="vue2-x的响应式原理"><a href="#vue2-x的响应式原理" class="headerlink" title="vue2.x的响应式原理"></a>vue2.x的响应式原理</h1><p>在<strong>Vue2.X</strong> 响应式中使用到了 <strong>defineProperty</strong> 进行数据劫持，所以我们对它必须有一定的了解，那么我们先来了解它的使用方法把， 这里我们来使用 <strong>defineProperty</strong>来模拟 <strong>Vue</strong> 中的 <strong>data</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;body&gt;<br>  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;<br>  &lt;script&gt;<br>    // 模拟 Vue的data<br>    let data = &#123;<br>      msg: &#x27;&#x27;,<br>    &#125;<br>    // 模拟 Vue 实例<br>    let vm = &#123;&#125;<br>    // 对 vm 的 msg 进行数据劫持<br>    Object.defineProperty(vm, &#x27;msg&#x27;, &#123;<br>      // 获取数据<br>      get() &#123;<br>        return data.msg<br>      &#125;,<br>      // 设置 msg<br>      set(newValue) &#123;<br>        // 如果传入的值相等就不用修改<br>        if (newValue === data.msg) return<br>        // 修改数据<br>        data.msg = newValue<br>        document.querySelector(&#x27;#app&#x27;).textContent = data.msg<br>      &#125;,<br>    &#125;)<br>    // 这样子就调用了 defineProperty vm.msg 的 set<br>    vm.msg = &#x27;1234&#x27;<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>看了上面的方法只能修改一个属性，实际上我们 <strong>data</strong> 中数据不可能只有一个,我们何不定义一个方法把<strong>data</strong>中的数据进行遍历都修改成响应式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;body&gt;<br>    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;<br>&lt;script&gt;<br>        // 模拟 Vue的data<br>        let data = &#123;<br>            msg: &#x27;哈哈&#x27;,<br>            age: &#x27;18&#x27;,<br>        &#125;<br>        // 模拟 Vue 实例<br>        let vm = &#123;&#125;<br>        // 把多个属性转化 响应式<br>        function proxyData() &#123;<br>            // 把data 中每一项都[msg,age] 拿出来操作<br>            Object.keys(data).forEach((key) =&gt; &#123;<br>                // 对 vm 的 属性 进行数据劫持<br>                Object.defineProperty(vm, key, &#123;<br>                    // 可枚举<br>                    enumerable: true,<br>                    // 可配置<br>                    configurable: true,<br>                    // 获取数据<br>                    get() &#123;<br>                        return data[key]<br>                    &#125;,<br>                    // 设置 属性值<br>                    set(newValue) &#123;<br>                        // 如果传入的值相等就不用修改<br>                        if (newValue === data[key]) return<br>                        // 修改数据<br>                        data[key] = newValue<br>                        document.querySelector(&#x27;#app&#x27;).textContent = data[key]<br>                    &#125;,<br>                &#125;)<br>            &#125;)<br>        &#125;<br>        // 调用方法<br>        proxyData(data)<br><br>&lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h1 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h1><p>首先来说简单介绍下 一共有三个角色<br><strong>发布者</strong>、 <strong>订阅者</strong>、 <strong>信号中心</strong><br>在Vue 中的例子 就是<strong>EventBus</strong> $on $emit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;body&gt;<br>  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;<br>  &lt;script&gt;<br>    class Vue &#123;<br>      constructor() &#123;<br>        // 用来存储事件<br>        // 存储的 例子 this.subs = &#123; &#x27;myclick&#x27;: [fn1, fn2, fn3] ,&#x27;inputchange&#x27;: [fn1, fn2] &#125;<br>        this.subs = &#123;&#125;<br>      &#125;<br>      // 实现 $on 方法 type是任务队列的类型 ,fn是方法<br>      $on(type, fn) &#123;<br>        // 判断在 subs是否有当前类型的 方法队列存在<br>        if (!this.subs[type]) &#123;<br>          // 没有就新增一个 默认为空数组<br>          this.subs[type] = []<br>        &#125;<br>        // 把方法加到该类型中<br>        this.subs[type].push(fn)<br>      &#125;<br>      // 实现 $emit 方法<br>      $emit(type) &#123;<br>        // 首先得判断该方法是否存在<br>        if (this.subs[type]) &#123;<br>          // 获取到参数<br>          const args = Array.prototype.slice.call(arguments, 1)<br>          // 循环队列调用 fn<br>          this.subs[type].forEach((fn) =&gt; fn(...args))<br>        &#125;<br>      &#125;<br>    &#125;<br><br>    // 使用<br>    const eventHub = new Vue()<br>    // 使用 $on 添加一个 sum 类型的 方法到 subs[&#x27;sum&#x27;]中<br>    eventHub.$on(&#x27;sum&#x27;, function () &#123;<br>      let count = [...arguments].reduce((x, y) =&gt; x + y)<br>      console.log(count)<br>    &#125;)<br>    // 触发 sum 方法<br>    eventHub.$emit(&#x27;sum&#x27;, 1, 2, 4, 5, 6, 7, 8, 9, 10)<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h1 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h1><p>与发布订阅者不同 观察者中 发布者和订阅者(观察者)是相互依赖的 必须要求观察者订阅内容改变事件 ，而发布订阅者是由调度中心进行调度，那么观察者模式是相互依赖，下面就举个简单例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;body&gt;<br>  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;<br>  &lt;script&gt;<br>    // 目标<br>    class Subject &#123;<br>      constructor() &#123;<br>        this.observerLists = []<br>      &#125;<br>      // 添加观察者<br>      addObs(obs) &#123;<br>        // 判断观察者是否有 和 存在更新订阅的方法<br>        if (obs &amp;&amp; obs.update) &#123;<br>          // 添加到观察者列表中<br>          this.observerLists.push(obs)<br>        &#125;<br>      &#125;<br>      // 通知观察者<br>      notify() &#123;<br>        this.observerLists.forEach((obs) =&gt; &#123;<br>          // 每个观察者收到通知后 会更新事件<br>          obs.update()<br>        &#125;)<br>      &#125;<br>      // 清空观察者<br>      empty() &#123;<br>        this.subs = []<br>      &#125;<br>    &#125;<br><br>    class Observer &#123;<br>      // 定义观察者内容更新事件<br>      update() &#123;<br>        // 在更新事件要处理的逻辑<br>        console.log(&#x27;目标更新了&#x27;)<br>      &#125;<br>    &#125;<br><br>    // 使用<br>    // 创建目标<br>    let sub = new Subject()<br>    // 创建观察者<br>    let obs1 = new Observer()<br>    let obs2 = new Observer()<br>    // 把观察者添加到列表中<br>    sub.addObs(obs1)<br>    sub.addObs(obs2)<br>    // 目标开启了通知 每个观察者者都会自己触发 update 更新事件<br>    sub.notify()<br>  &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="鞭尸supershop"><a href="#鞭尸supershop" class="headerlink" title="鞭尸supershop"></a>鞭尸supershop</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs vue">sendShopCar() &#123;<br>let that = this<br>let arr = []<br>this.tabbar.forEach(item =&gt; &#123;<br>console.log(item);<br>item.list.forEach(item1 =&gt; &#123;<br>if (item1.num &gt; 0) &#123;<br>arr.push(item1)<br>&#125;<br>&#125;)<br>&#125;)<br><br>  <br>this.$store.state.Cartlist = arr<br><br>  <br>  console.log(arr);<br>uni.request(&#123;<br>url: `https://mall.wuhanzhuangxiu01.cn/apip/cart/`,<br>method: &quot;POST&quot;,<br>data: &#123;<br>&quot;data&quot;: JSON.stringify(arr),<br>&quot;appid&quot;: that.appId,<br>&quot;openid&quot;: that.openid,<br>&quot;shopid&quot;: that.shop_info.uid<br>&#125;,<br>success: (res) =&gt; &#123;<br>console.log(res);<br>&#125;<br>&#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><p>关于为什么在shopCarts页面没有实现响应式的原因<br>新加入的Cartlist属性是直接显示在控制台上的，并没有被匹配一对getter和setter，这就是视图不能立即响应的原因。<br>直接给state里的数据使用最简单粗暴的赋值的方式添加属性，并没有通过Vue对数据进行操作，所以这样并不会是响应式。<br>我们需要使用Vue.set(target,propertyName,value)这个方法来实现修改响应式数据</p><ul><li>target:要更改的数据（一般是响应式对象） 例：state.data</li><li>property:这个对象中的子对象或者属性</li><li>value：你想要赋的值<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vue">Vue.set(this.$store.state.Cartlist,&quot;Cartlist&quot;,arr)<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;defineProperty&quot;&gt;&lt;a href=&quot;#defineProperty&quot; class=&quot;headerlink&quot; title=&quot;defineProperty&quot;&gt;&lt;/a&gt;defineProperty&lt;/h1&gt;&lt;p&gt;这个obj上的方法可以用来修改指定的对象属性</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/salty.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="js" scheme="http://example.com/salty.github.io/tags/js/"/>
    
  </entry>
  
</feed>
